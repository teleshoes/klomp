#!/usr/bin/perl
use strict;
use warnings;
use Sys::Hostname;

sub isN900();
sub defaultPlaylist();
sub start();
sub stop();
sub isRunning();
sub shellQuiet(@);
sub nextItem();
sub prevItem();

if(isN900 and `whoami` =~ /^root(\n|$)/){
  print "you are root. rerunning as user\n";
  exec "udo", $0, @ARGV;
}

my $klompCmdExec = 'klomp-cmd';
my $klomplayerExec = 'klomplayer';
my $KLOMPCUR = `echo -n \$HOME/.klompcur`;
my $KLOMPLIST = `echo -n \$HOME/.klomplist`;
my $KLOMPHIST = `echo -n \$HOME/.klomphistory`;
my $FIFO = '/tmp/klomplayer_fifo';
my $PID_FILE = '/tmp/klomplayer_pid';

sub main(){
  my $cmd = $ARGV[0];
  $cmd = '' if not defined $cmd;

  if($cmd eq 'start'){
    stop;
    start;
  }elsif($cmd eq 'stop'){
    stop;
  }elsif($cmd eq 'pause'){
    if(not isRunning){
      stop;
      defaultPlaylist;
      start;
    }else{
      if(isN900){
        stop;
      }else{
        system "echo pause > $FIFO";
      }
    }
  }elsif($cmd eq 'next'){
    stop;
    start if nextItem();
  }elsif($cmd eq 'prev'){
    stop;
    start if prevItem();
  }elsif($cmd eq 'reset'){
    system "echo -n > $KLOMPLIST";
    system "echo -n > $KLOMPHIST";
  }elsif(@ARGV > 0){
    system "echo @ARGV > $FIFO";
  }else{
    die "Usage: $0 [start|stop|pause|next|prev|reset]
    or $0 <mplayer slave input> {e.g.: seek 10}\n";
  }
}

sub isN900(){
  return hostname() =~ /n900/i ? 1 : 0;
}
sub defaultPlaylist(){
  my @KLOMPLIST = -e $KLOMPLIST ? `cat $KLOMPLIST` : ();
  if(@KLOMPLIST == 0){
    system "$klompCmdExec -a";
  }
}
sub start(){
  system "$klomplayerExec";
}

sub stop(){
  system "kill -9 `cat $PID_FILE`";
  system "killall -9 mplayer" if isN900;
}
sub isRunning(){
  system "kill -0 `cat $PID_FILE`";
  return $? == 0 ? 1 : 0;
}

sub wrapTokens(@){
  my @tokens;
  for my $token(@_){
    my $t = $token;
    $t =~ s/'/'\\''/g;
    push @tokens, "'$t'";
  }
  return @tokens;
}
sub shellQuiet(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd 2>/dev/null`;
}
sub shell(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd`;
}

sub popFile($){
  my $file = shift;
  if(not -e $file){
   return undef;
  }
  my @items = `cat $file`;
  if(@items == 0){
    return undef;
  }
  my $item = shift @items;

  open FH, "> $file";
  print FH @items;
  close FH;

  return $item;
}

sub pushFile($$){
  my $file = shift;
  my $item = shift;
  $item =~ s/\n*$/\n/;
  my @items = -e $file ? `cat $file` : ();
  @items = ($item, @items);
  open FH, "> $file";
  print FH @items;
  close FH;
}

sub getCur(){
  my $cur = -e $KLOMPCUR ? `cat $KLOMPCUR` : '';
  if($cur =~ /^[0-9\-\.]+ [0-9\-\.]+ (.*)$/s){
    my $item = $1;
    chomp $item;
    $item =~ s/\n/\/\/\/\\\\\\/g;
    return $item;
  }else{
    return undef;
  }
}

sub setCur($){
  my $item = shift;
  $item =~ s/\/\/\/\\\\\\/\n/g;
  open FH, "> $KLOMPCUR";
  print FH "0.0 0.0 $item\n";
  close FH;
}

sub prevnext($$){
  my $srcFile = shift;
  my $destFile = shift;
  
  my $oldCur = getCur;
  my $cur = popFile $srcFile;
  if(defined $cur){
    if(defined $oldCur){
      pushFile $destFile, $oldCur;
    }
    setCur $cur;
    return 1;
  }else{
    return 0;
  }
}

sub nextItem(){
  return prevnext $KLOMPLIST, $KLOMPHIST;
}

sub prevItem(){
  return prevnext $KLOMPHIST, $KLOMPLIST;
}

&main;
