#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);
use Term::ReadKey;

$SIG{'INT'} = sub{system "clear"; ReadMode 0; exit 0};

sub printKlompCur();
sub formatClear($$);
sub formatLines(\@$$);
sub doKlompCmd($);
sub key();
sub interpretKey($);

my $klompCmdExec = 'klomp-cmd';
my $klompSearchExec = 'klomp-search';
our $DEFAULT_EDITOR = 'vim';
our $KLOMPLIST = `echo -n \$HOME/.klomplist`;
our $KLOMPCUR = `echo -n \$HOME/.klompcur`;

our $keyDelay = 0.3;
our $lib = `echo -n \$HOME/Desktop/Music/Library`;
our $flacLib = `echo -n \$HOME/Desktop/Music/flacmirror`;
our $n900lib = `echo -n /home/wolke/Desktop/Music/Library`;
our $n900flacLib = `echo -n /home/wolke/Desktop/Music/flacmirror`;

sub main(){
  system "clear";
  while(1){
    printKlompCur;
    for my $key(@{getSomeKeys()}){
      doKlompCmd $key;
    }
  }
}

sub hms($){
  my $sex = shift;
  my $h = int($sex / (60*60));
  my $m = int($sex / (60));
  my $s = int($sex % (60));
  return ($h, $m, $s);
}
sub parseTime($$){
  my $pos = shift;
  my $len = shift;
  my ($pH, $pM, $pS) = hms $pos;
  my ($lH, $lM, $lS) = hms $len;
  my ($newPos, $newLen) = ('', '');
  if($pH > 0 or $lH > 0){
    my $hlen = length $pH;
    $hlen = length $lH if length $lH > $hlen;
    $newPos .= '0' x ($hlen - length $pH) . $pH . ':';
    $newLen .= '0' x ($hlen - length $lH) . $lH . ':';
  }
  $newPos .= '0' x (2 - length $pM) . $pM . ':';
  $newLen .= '0' x (2 - length $lM) . $lM . ':';

  $newPos .= '0' x (2 - length $pS) . $pS;
  $newLen .= '0' x (2 - length $lS) . $lS;

  return ($newPos, $newLen);
}

sub parseCur($){
  my $cur = shift;
  if($cur =~ /^([0-9\-\.]+) ([0-9\-\.]+) (.*)/){
    my $pos = $1;
    my $length = $2;
    my $path = $3;

    ($pos, $length) = parseTime $pos, $length;
  
    my @lines = split /\n/, $cur;
    my $artist = $lines[0];
    my $title = $lines[1];
    for my $line(@lines){
      if($line =~ /^artist(?:_guess)?=(.*)/){
        $artist = $1 if ($1 ne '');
      }elsif($line =~ /^title(?:_guess)?=(.*)/){
        $title = $1 if ($1 ne '');
      }
    }
    return ($pos, $length, $artist, $title);
  }
  return ('00:00', '00:00', 'none', 'none');
}

sub printKlompCur(){
  sleep 0.5;
  my ($width, $height) = Term::ReadKey::GetTerminalSize;
 
  my $cur = -e $KLOMPCUR ? `cat $KLOMPCUR` : '';
  my @list = -e $KLOMPLIST ? `cat $KLOMPLIST` : ();
  
  my @lines;
  my ($pos, $length, $artist, $title) = parseCur $cur;
  my $size = @list;

  my $cmdSummary = "q quit, e edit, a add, < prev, > next, h help";
  $cmdSummary = (' ' x int(($width-(length $cmdSummary))/2)) . $cmdSummary;

  push @lines, "$pos $artist";
  push @lines, "$length $title";
  push @lines, "$size files";
  push @lines, $cmdSummary;

  my $max = @list;
  $max = $height-2 if $height-2 < $max;

  @list = @list[0 .. $max-1];

  for(my $i=0; $i<@list; $i++){
    my $file = $list[$i];
    $file =~ s/\/\/\/\\\\\\.*//;
    chomp $file;
    $file =~ s/^$lib//;
    $file =~ s/^$flacLib//;
    $file =~ s/^$n900lib//;
    $file =~ s/^$n900flacLib//;
    my $num = $i+1;
    push @lines, "$num: $file";
  }

  my $out = ''
    . formatClear($width, $height)
    . formatLines(@lines, $width, $height)
    ;
  system 'echo', '-ne', $out;
}

sub formatClear($$){
  my $width = shift;
  my $height = shift;
  my $out = '';
  for(my $i=1; $i<=$height+1; $i++){
    $out .= "\\033[$i;0H" . ' 'x$width;
  }
  return $out;
}

sub formatLines(\@$$){
  my @lines = @{shift()};
  my $width = shift;
  my $height = shift;
 
  my $topLimit = $height-1;
  $topLimit = $#lines if $topLimit > $#lines;

  my $out = '';
  my $curLine = 1;
  for my $line(@lines[0 .. $topLimit]){
    if(length $line > $width){
      $line = substr $line, 0, $width;
    }
    $out .= "\\033[$curLine;0H$line";
    $curLine++;
  }
  return $out;
}

sub doKlompCmd($){
  my $key = shift;
  my %cmdKeys = (
    UP     => 'seek 60',
    DOWN   => 'seek -60',
    LEFT   => 'seek -10',
    RIGHT  => 'seek 10',
    ENTER  => 'next',
    ESCAPE => 'stop',
    '<'    => 'prev',
    '>'    => 'next',
    ' '    => 'pause',
    'p'    => 'pause',
    'q'    => 'stop',
    's'    => 'shuffle',
  );
  my $cmd = $cmdKeys{$key};
  
  if(defined $cmd){
    system "$klompCmdExec $cmd > /dev/null 2> /dev/null &";
  }

  if($key eq 'q'){
    system "clear";
    ReadMode 0;
    exit 0;
  }elsif($key eq 'h'){
    system "clear";
    print "keys i understand:\n";
    for my $key(sort keys %cmdKeys){
      print "'$key' -> $klompCmdExec $cmdKeys{$key}\n";
    }
    print "\n";
    print ''
     . "q 'quit'   stops playback per above, also exits this display\n"
     . "\n"
     . "e 'edit'   edit $KLOMPLIST contents using \$EDITOR\n"
     . "a 'append' runs $klompSearchExec --once\n"
     . "           interactively searches for songs\n"
     . "           adds them to the current playlist\n"
     . "           you can append, prepend, shuffle in, or overwrite\n"
     ;
    <STDIN>;
  }elsif($key eq 'a'){
    system "$klompSearchExec --once";
  }elsif($key eq 'e'){
    my $tmpFile = "/tmp/klomplist_" . time . ".tmp";
    system "cp $KLOMPLIST $tmpFile";
    my $editor = $ENV{EDITOR};
    $editor = $DEFAULT_EDITOR if $editor eq '';
    system "$editor $tmpFile";
    my $editorExit = $?;
    if($editorExit == 0){
      print "overwriting $KLOMPLIST with $tmpFile\n";
      system "cp $tmpFile $KLOMPLIST";
    }else{
       print "discarding edits\n";
    }
  }elsif($key eq ':'){
    print "\nenter klomp cmd or mplayer -slave input {e.g.: 'reset', 'seek -25'}\n";
    print "cmd: ";
    ReadMode 0;
    my $klompcmd = <STDIN>;
    chomp $klompcmd;
    if($klompcmd ne ''){
      system "$klompCmdExec $klompcmd > /dev/null 2> /dev/null &";
    }
  }
}

sub getSomeInput(){
  ReadMode 3;
  my @bytes;
  my $start = time;

  while(1){
    my $byte = ReadKey($keyDelay);
    last if not defined $byte and time - $start > $keyDelay;
    push @bytes, $byte if defined $byte;
  }
  ReadMode 0;
  return \@bytes;
}

#assumes utf8
sub getSomeKeys(){
  my $enter = 'ENTER';
  my $bkspc = 'BACKSPACE';
  my @cmds = (
    ['[', 'A'], 'UP',
    ['[', 'B'], 'DOWN',
    ['[', 'C'], 'RIGHT',
    ['[', 'D'], 'LEFT',
    ['O', 'H'], 'HOME',
    ['O', 'F'], 'END',
    ['[', '2', '~'], 'INSERT',
    ['[', '3', '~'], 'DELETE',
    ['[', '5', '~'], 'PGUP',
    ['[', '6', '~'], 'PGDN',
  );

  my @keys;
  my @bytes = @{getSomeInput()};
  for(my $i=0; $i<@bytes; $i++){
    if(ord $bytes[$i] == 0x1b){
      my $k1 = $i+1<=$#bytes ? $bytes[$i+1] : '';
      my $k2 = $i+2<=$#bytes ? $bytes[$i+2] : '';
      my $k3 = $i+3<=$#bytes ? $bytes[$i+3] : '';
      for(my $c=0; $c<@cmds; $c+=2){
        my @cmdArr= @{$cmds[$c]};
        my $cmd= $cmds[$c+1];
        if(@cmdArr == 2 and $cmdArr[0] eq $k1 and $cmdArr[1] eq $k2){
          push @keys, $cmd;
          $i+=2;
          last;
        }elsif(@cmdArr == 3 and
               $cmdArr[0] eq $k1 and
               $cmdArr[1] eq $k2 and
               $cmdArr[2] eq $k3){
          push @keys, $cmd;
          $i+=3;
          last;
        }
      }
    }elsif($bytes[$i] eq "\n"){
      push @keys, $enter;
    }elsif(ord $bytes[$i] == 0x7f){
      push @keys, $bkspc;
    }elsif(ord $bytes[$i] >= 0xc2 and ord $bytes[$i] <= 0xdf){
      my $b1 = $bytes[$i];
      my $b2 = $i+1<=$#bytes ? $bytes[$i+1] : '';
      my $key = "$b1$b2";
      $i+=1;
      utf8::decode($key);
      push @keys, $key; 
    }elsif(ord $bytes[$i] >= 0xe0 and ord $bytes[$i] <= 0xef){
      my $b1 = $bytes[$i];
      my $b2 = $i+1<=$#bytes ? $bytes[$i+1] : '';
      my $b3 = $i+2<=$#bytes ? $bytes[$i+2] : '';
      my $key = "$b1$b2$b3";
      $i+=2;
      utf8::decode($key);
      push @keys, $key;
    }else{
      push @keys, $bytes[$i];
    }
  }
  return \@keys;
}

&main;
