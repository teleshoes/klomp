#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);
use Term::ReadKey;

sub printQcur();
sub formatClear($$);
sub formatLines(\@$$);
sub doQcmd();
sub key();
sub interpretKey($);

our $QLIST = `echo -n \$HOME/.qlist`;
our $QCUR = `echo -n \$HOME/.qcur`;

our $lib = `echo -n \$HOME/Desktop/Music/Library`;
our $flacLib = `echo -n \$HOME/Desktop/Music/flacmirror`;
our $n900lib = `echo -n /home/wolke/Desktop/Music/Library`;
our $n900flacLib = `echo -n /home/wolke/Desktop/Music/flacmirror`;

sub main(){
  system "clear";
  if(fork){
    doQcmd while 1;
  }else{
    printQcur while 1;
  }
}
sub hms($){
  my $sex = shift;
  my $h = int($sex / (60*60));
  my $m = int($sex / (60));
  my $s = int($sex % (60));
  return ($h, $m, $s);
}
sub parseTime($$){
  my $pos = shift;
  my $len = shift;
  my ($pH, $pM, $pS) = hms $pos;
  my ($lH, $lM, $lS) = hms $len;
  my ($newPos, $newLen) = ('', '');
  if($pH > 0 or $lH > 0){
    my $hlen = length $pH;
    $hlen = length $lH if length $lH > $hlen;
    $newPos .= '0' x ($hlen - length $pH) . $pH . ':';
    $newLen .= '0' x ($hlen - length $lH) . $lH . ':';
  }
  $newPos .= '0' x (2 - length $pM) . $pM . ':';
  $newLen .= '0' x (2 - length $lM) . $lM . ':';

  $newPos .= '0' x (2 - length $pS) . $pS;
  $newLen .= '0' x (2 - length $lS) . $lS;

  return ($newPos, $newLen);
}

sub parseCur($){
  my $cur = shift;
  if($cur =~ /^([0-9\-\.]+) ([0-9\-\.]+) (.*)/){
    my $pos = $1;
    my $length = $2;
    my $path = $3;

    ($pos, $length) = parseTime $pos, $length;
  
    my @lines = split /\n/, $cur;
    my $artist = $lines[0];
    my $title = $lines[1];
    for my $line(@lines){
      if($line =~ /^artist(?:_guess)?=(.*)/){
        $artist = $1 if ($1 ne '');
      }elsif($line =~ /^title(?:_guess)?=(.*)/){
        $title = $1 if ($1 ne '');
      }
    }
    return ($pos, $length, $artist, $title);
  }
  return ('00:00', '00:00', 'none', 'none');
}

sub printQcur(){
  sleep 0.5;
  my ($width, $height) = Term::ReadKey::GetTerminalSize;
 
  my $cur = -e $QCUR ? `cat $QCUR` : '';
  my @list = -e $QLIST ? `cat $QLIST` : ();
  
  my @lines;
  my ($pos, $length, $artist, $title) = parseCur $cur;
  my $size = @list;

  my $headerOne = "$pos $artist";
  my $headerTwo = "$length $title";
  my $headerThree = "$size files";
  push @lines, $headerOne;
  push @lines, $headerTwo;
  push @lines, $headerThree;

  my $max = @list;
  $max = $height-2 if $height-2 < $max;

  @list = @list[0 .. $max-1];

  for(my $i=0; $i<@list; $i++){
    my $file = $list[$i];
    $file =~ s/\/\/\/\\\\\\.*//;
    chomp $file;
    $file =~ s/^$lib//;
    $file =~ s/^$flacLib//;
    $file =~ s/^$n900lib//;
    $file =~ s/^$n900flacLib//;
    push @lines, "$i: $file";
  }

  my $out = ''
    . formatClear($width, $height)
    . formatLines(@lines, $width, $height)
    ;
  system 'echo', '-ne', $out;
}

sub formatClear($$){
  my $width = shift;
  my $height = shift;
  my $out = '';
  for(my $i=1; $i<=$height+1; $i++){
    $out .= "\\033[$i;0H" . ' 'x$width;
  }
  return $out;
}

sub formatLines(\@$$){
  my @lines = @{shift()};
  my $width = shift;
  my $height = shift;
 
  my $topLimit = $height-2;
  $topLimit = $#lines if $topLimit > $#lines;

  my $out = '';
  my $curLine = 1;
  for my $line(@lines[0 .. $topLimit]){
    if(length $line > $width){
      $line = substr $line, 0, $width;
    }
    $out .= "\\033[$curLine;0H$line";
    $curLine++;
  }
  return $out;
}

sub doQcmd(){
  my $key = key;
  my $cmd = interpretKey $key;
  $cmd = $key if not defined $cmd;
  my %qcmdKeys = (
    UP     => 'seek 60',
    DOWN   => 'seek -60',
    LEFT   => 'seek -10',
    RIGHT  => 'seek 10',
    ENTER  => 'next',
    ESCAPE => 'stop',
    '<'    => 'prev',
    '>'    => 'next',
    ' '    => 'pause',
    'p'    => 'pause',
    'q'    => 'stop',
  );
  my $qcmd = $qcmdKeys{$cmd};
  system "qcmd $qcmd > /dev/null 2> /dev/null &" if defined $qcmd;
}

sub key(){
  my $BSD = -f '/vmunix';
  if ($BSD) {
    system "stty cbreak /dev/tty 2>&1";
  }else {
    system "stty", '-icanon', 'eol', "\001";
  }
  my $key = getc(STDIN);
  if ($BSD) {
    system "stty -cbreak /dev/tty 2>&1";
  }
  else {
    system "stty", 'icanon';
    system "stty", 'eol', '^@'; # ascii null
  }
  return $key;
}

sub interpretKey($){
  my $key = shift;
  $key = ord $key;
  if($key == 127){
    return 'BACKSPACE';
  }elsif($key == 10){
    return 'ENTER';
  }elsif($key == 27){
    my $key2 = ord key;
    if($key2 == 91){
      my $key3 = ord key;
      if($key3 == 65){
        return 'UP';
      }elsif($key3 == 66){
        return 'DOWN';
      }elsif($key3 == 68){
        return 'LEFT';
      }elsif($key3 == 67){
        return 'RIGHT';
      }elsif($key3 == 53){
        key; #generates a ~
        return 'PGUP';
      }elsif($key3 == 54){
        key; #generates a ~
        return 'PGDN';
      }elsif($key3 == 51){
        my $key4 = ord key;
        if($key4 == 126){
          return 'DELETE';
        }
      }
    }elsif($key2 == 27){
      return 'ESCAPE';
    }elsif($key2 == 79){
      my $key3 = ord key;
      if($key3 == 72){
        return 'HOME';
      }elsif($key3 == 70){
        return 'END';
      }
    }else{
      return $key2;
    }
  }
  return undef;
}

&main;
