#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Lib;

my $unit = "MiB";
my $unitBytes = 2**20;
my $colWidth = 6;
my $numFormat = "%$colWidth.0f";

sub formatRow($);
sub fmt($);
sub pad($$);
sub du($;$);
sub convert($);
sub getSongCount(@);
sub getLibRow($);

sub main(@){
  my @libs = Klomp::Lib::getAllLibNames;

  my $msg = ''
    . "Size unit: $unit  ($unitBytes bytes)"
    . "  {COUNT is # of song files}"
    . "  format: $numFormat"
    . "\n"
    . "  {SYNC is the size with flacmirror-oggs, instead of flacs}"
    . "\n";
  print $msg;
  my %okLibs = map {$_ => 1} @_;
  %okLibs = map {$_ => 1} @libs if keys %okLibs == 0;

  my $titleRow = {
      lib => "LIB",
      sync => "SYNC",
      total => "TOTAL",
      flac => "FLAC",
      flacmirror => "FM-OGG",
      nonflac => "OTHER",
      songcount => "COUNT",
  };

  my @libRows = map {getLibRow $_} grep {defined $okLibs{$_}} @libs;

  my $totalRow = {
      lib => "total",
      sync => 0,
      total => 0,
      flac => 0,
      flacmirror => 0,
      nonflac => 0,
      songcount => 0,
  };
  foreach my $key(keys %$titleRow){
    next if $key eq 'lib';
    foreach my $libRow(@libRows){
      if($$totalRow{$key} =~ /\?/ or $$libRow{$key} =~ /\?/){
        $$totalRow{$key} = "?";
      }else{
        $$totalRow{$key} += $$libRow{$key};
      }
    }
  }

  print formatRow($titleRow);
  print formatRow($_) foreach @libRows;
  print formatRow($totalRow);
}

sub formatRow($){
  my $row = shift;
  return ''
    . fmt($$row{lib})
    . " | " . fmt($$row{sync})
    . " | " . fmt($$row{total})
    . " | " . fmt($$row{flac})
    . " => " . fmt($$row{flacmirror})
    . " | " . fmt($$row{nonflac})
    . " | " . fmt($$row{songcount})
    . "\n"
    ;
}
sub fmt($){
  my $s = shift;
  if($s =~ /^(\d*\.)?\d+$/){
    return sprintf $numFormat, $s;
  }else{
    return pad $colWidth, substr($s, 0, $colWidth);
  }
}

sub pad($$){
  return ' ' x ($_[0] - length $_[1]) . $_[1];
}

sub du($;$){
  my $path = shift;
  my $args = shift() || '';
  $path =~ s/'/'\\''/g;
  my $cmd = "du -bs $args '$path'";
  my $size = `$cmd`;
  if($size !~ /^(\d+)/){
    die "Error processing $cmd\n";
  }else{
    return $1;
  }
}

sub convert($){
  return $_[0]/$unitBytes;
}

sub getSongCount(@){
  my @cmd = ('klomp-db', '-s', '');
  for my $lib(@_){
    push @cmd, ('--lib', $lib);
  }
  open FH, "-|", @cmd;
  my $cnt = 0;
  while(<FH>){
    $cnt++;
  }
  close FH;
  die "Error getting song count\n" if $? != 0;
  return $cnt;
}

sub getLibRow($){
  my $lib = shift;

  my $path = Klomp::Lib::getLibraryPath $lib;
  my $fmPath = Klomp::Lib::getFlacmirrorPath $lib;

  my $size = du $path;
  if(defined $fmPath and $fmPath){
    my $nonFlacSize = du $path, '--exclude=\*.flac';
    my $flacMirrorSize = du $fmPath;
    my $flacSize = $size - $nonFlacSize;
    my $sync = $nonFlacSize + $flacMirrorSize;

    my $flacMissing = $flacSize == 0 && $flacMirrorSize > 0;

    return {
      lib => $lib,
      sync => convert $sync,
      total => ($flacMissing ? "?" : convert $size),
      flac => ($flacMissing ? "?" : convert $flacSize),
      flacmirror => convert $flacMirrorSize,
      nonflac => convert $nonFlacSize,
      songcount => getSongCount $lib,
    };
  }else{
    return {
      lib => $lib,
      sync => convert $size,
      total => convert $size,
      flac => 0,
      flacmirror => 0,
      nonflac => 0,
      songcount => getSongCount $lib,
    };
  }
}

&main(@ARGV);
