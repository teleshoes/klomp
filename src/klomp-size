#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Lib;

my $unit = "MiB";
my $unitBytes = 2**20;
my $numLen = 6;
my $numFormat = "%$numLen.0f";

sub formatLine($$$$$$$);
sub pad($$);
sub du($;$);
sub convert($);
sub fmt($);
sub fmtAndConvert($);
sub getSongCount(@);
sub getSizes($);

sub main(@){
  my @libs = Klomp::Lib::getAllLibNames;

  print "Unit: $unit  ($unitBytes bytes)  format: $numFormat\n";
  print "  {SYNC is the size with flacmirror-oggs, instead of flacs}\n";
  my %okLibs = map {$_ => 1} @_;
  %okLibs = map {$_ => 1} @libs if keys %okLibs == 0;

  my @libSizeHashes;
  for my $lib(@libs){
    next if not defined $okLibs{$lib};
    my %libSizeHash = getSizes $lib;
    push @libSizeHashes, \%libSizeHash;
  }
  my %totalSizeHash = (lib => 'total');
  if(@libSizeHashes > 0){
    foreach my $key(keys %{$libSizeHashes[0]}){
      next if $key eq 'lib';
      foreach(@libSizeHashes){
        my $val = $$_{$key};
        $totalSizeHash{$key} = 0 if not defined $totalSizeHash{$key};
        $totalSizeHash{$key} = fmt($val + $totalSizeHash{$key});
      }
    }
  }
  push @libSizeHashes, \%totalSizeHash;

  print formatLine("LIB", "SYNC", "TOTAL", "FLAC", "FM-OGG", "OTHER", "COUNT");

  foreach(@libSizeHashes){
    print formatLine(
      $$_{lib},
      $$_{sync},
      $$_{total},
      $$_{flac},
      $$_{flacmirror},
      $$_{nonflac},
      $$_{songcount},
      );
  }
}

sub formatLine($$$$$$$){
  my ($lib, $sync, $total, $flac, $flacmirror, $nonflac, $songcount) = @_;
  my $abbrev = 5;
  $lib = pad $abbrev, substr($lib, 0, $abbrev);
  return ''
    . "$lib"
    . " | " . pad($numLen, $sync)
    . " | " . pad($numLen, $total)
    . " | " . pad($numLen, $flac)
    . " => " . pad($numLen, $flacmirror)
    . " | " . pad($numLen, $nonflac)
    . " | " . pad($numLen, $songcount)
    . "\n"
    ;
}

sub pad($$){
  return ' ' x ($_[0] - length $_[1]) . $_[1];
}

sub du($;$){
  my $path = shift;
  my $args = shift() || '';
  $path =~ s/'/'\\''/g;
  my $cmd = "du -bs $args '$path'";
  my $size = `$cmd`;
  if($size !~ /^(\d+)/){
    die "Error processing $cmd\n";
  }else{
    return $1;
  }
}

sub convert($){
  return $_[0]/$unitBytes;
}
sub fmt($){
  return sprintf $numFormat, $_[0];
}
sub fmtAndConvert($){
  return fmt(convert($_[0]));
}

sub getSongCount(@){
  my @cmd = ('klomp-db', '-s', '');
  for my $lib(@_){
    push @cmd, ('--lib', $lib);
  }
  open FH, "-|", @cmd;
  my $cnt = 0;
  while(<FH>){
    $cnt++;
  }
  close FH;
  die "Error getting song count\n" if $? != 0;
  return $cnt;
}

sub getSizes($){
  my $lib = shift;

  my $path = Klomp::Lib::getLibraryPath $lib;
  my $fmPath = Klomp::Lib::getFlacmirrorPath $lib;

  my $size = du $path;
  if(defined $fmPath and $fmPath){
    my $nonFlacSize = du $path, '--exclude=\*.flac';
    my $flacMirrorSize = du $fmPath;
    my $flacSize = $size - $nonFlacSize;
    my $sync = $nonFlacSize + $flacMirrorSize;
    return (
      lib => $lib,
      total => fmtAndConvert $size,
      sync => fmtAndConvert $sync,
      nonflac => fmtAndConvert $nonFlacSize,
      flac => fmtAndConvert $flacSize,
      flacmirror => fmtAndConvert $flacMirrorSize,
      songcount => getSongCount $lib,
    );
  }else{
    return (
      lib => $lib,
      total => fmtAndConvert $size,
      sync => fmtAndConvert $size,
      nonflac => fmtAndConvert 0,
      flac => fmtAndConvert 0,
      flacmirror => fmtAndConvert 0,
      songcount => getSongCount $lib,
    );
  }
}

&main(@ARGV);
