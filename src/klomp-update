#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Lib;

my $usage = "Usage:
  $0 [--quick]                        update all libs
  $0 [--quick] LIB [LIB LIB ..]       updated specified libs
  --quick
     pass --quick to klomp-db when adding songs
     {assume existing songs with the same path are unchanged}
";

sub runOrDie(@);
sub ensureDb();
sub getLibs(@);
sub genSymlinkDir($);

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  my $quick = 0;
  if(@_ > 0 and $_[0] =~ /^--quick$/){
    $quick = 1;
    shift;
  }

  my @libs = getLibs(@_);
  ensureDb();

  for my $lib(@libs){
    print "\nHandling library: $lib\n";

    runOrDie 'klomp-db', '-m', $lib;
    if($quick){
      runOrDie 'klomp-db', '-u', '--quick', $lib;
    }else{
      runOrDie 'klomp-db', '-u', $lib;
    }
  }

  for my $lib(@libs){
    my $dir = Klomp::Lib::getLibraryPath $lib;
    my $flacMirrorDir = Klomp::Lib::getFlacmirrorPath  $lib;
    system "mkdir", "-p", $flacMirrorDir if $flacMirrorDir ne "";

    if(-e $flacMirrorDir and -e $dir){
      print "\nflacmirror for: $lib\n";
      runOrDie "flacmirror $dir $flacMirrorDir";
    }
  }

  my $props = Klomp::Lib::getProperties;
  genSymlinkDir $$props{symlink} if defined $$props{symlink};
}

sub runOrDie(@){
  print "@_\n";
  system @_;
  die "\n'@_' failed\n" if $? != 0;
}

sub ensureDb(){
  print "ensuring klomp db\n";
  system "klomp-db -c 2>/dev/null";
  print "created db\n" if $? == 0;
}

sub getLibs(@){
  my @libs = @_;
  my @allLibs = Klomp::Lib::getAllLibNames;

  @libs = @allLibs if @libs == 0;

  my %okLibs = map {$_ => 1} @allLibs;
  my %givenLibs = map {$_ => 1} @libs;
  for my $lib(@libs){
    if(not defined $okLibs{$lib}){
      die "Unrecognized library name: $lib\nAvailable: @allLibs\n";
    }
  }
  for my $lib(@allLibs){
    if(not defined $givenLibs{$lib}){
      print "skipped: $lib\n";
    }
  }

  return @libs;
}

sub relPath($$){
  my ($absPath, $file) = @_;
  $absPath =~ s/\/$//;

  my @paths;
  while(length $absPath > 0){
    last if $file =~ s/^\Q$absPath\E\/?//;
    push @paths, "..";
    $absPath =~ s@/[^/]*$@@;
  }
  push @paths, $file if length $file > 0;
  return join("/", @paths);
}

sub symRel($$){
  my ($srcFile, $destFile) = @_;
  my $destDir = $destFile;
  $destDir =~ s@/([^/]*)$@@;
  my $relFile = relPath $destDir, $srcFile;

  symlink $relFile, $destFile;
}

sub genSymlinkDir($){
  my $symDir = shift;
  print "\n\nrefreshing symlink dir $symDir\n";
  if(-d $symDir){
    system "find", $symDir, "-depth", "-type", "l", "-delete";
    system "find", $symDir, "-depth", "-type", "d", "-empty", "-delete";
  }
  die "Could not create $symDir, already exists\n" if -e $symDir;
  system "mkdir", "-p", $symDir;

  for my $lib(Klomp::Lib::getAllLibNames){
    my $libDir = Klomp::Lib::getLibraryPath $lib;
    for my $file(`find $libDir -maxdepth 1 -mindepth 1`){
      chomp $file;

      my $lnFile = $file;
      $lnFile =~ s/^.*\///;
      $lnFile = "$symDir/$lnFile";

      $lnFile .= "[$lib]" if -e $lnFile;
      $lnFile .= "-" . time if -e $lnFile;

      symRel $file, $lnFile;
    }
  }
}

&main(@ARGV);
