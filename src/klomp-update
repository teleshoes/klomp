#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Files;
use Klomp::Lib;
use File::Path qw(mkpath);

my $usage = "Usage:
  $0 [--quick] [--utils-only] [LIB LIB LIB ..]

  Compares library paths on the filesystem to the contents of the database,
    and makes updates to the database. Never modifies the files.

  Prompts before removing missing files, adds new files,
    and updates existing modified files.

  After updating the klompdb, if klomplib specifies a symlink dir,
    makes symlinks for all files in all libs in that dir,
    renaming the symlinks as necessary.
    Attempts to make the symlinks relative based on the libpath

  After updating the klompdb, if klomplib specifies a history dir,
    update the history.
    -takes a dump of the sqlite database
    -mirrors all library dirs with empty files
    -commits changes to a git repository

  --quick
     pass --quick to klomp-db when adding songs
       {assume existing songs with the same path are unchanged}
     dont update the symlink/history dirs
  --utils-only
     instead of updating any libs, update symlink/history dirs if they exist
";

sub runOrDie(@);
sub ensureDb();
sub getLibs(@);
sub genSymlinkDir($);
sub genHistoryDir($);

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  my $quick = 0;
  if(@_ > 0 and $_[0] =~ /^--quick$/){
    $quick = 1;
    shift;
  }

  my $utilsOnly = 0;
  if(@_ == 1 and $_[0] =~ /^--utils-only$/){
    $utilsOnly = 1;
    shift;
    die $usage if @_ > 0;
  }

  my @libs;
  if(not $utilsOnly){
    $quick = 1 if @_ > 0;
    @libs = getLibs(@_);
    ensureDb();
  }

  for my $lib(@libs){
    print "\nHandling library: $lib\n";

    runOrDie 'klomp-db', '-m', $lib;
    if($quick){
      runOrDie 'klomp-db', '-u', '--quick', $lib;
    }else{
      runOrDie 'klomp-db', '-u', $lib;
    }
  }

  for my $lib(@libs){
    my $dir = Klomp::Lib::getLibraryPath $lib;
    my $flacMirrorDir = Klomp::Lib::getFlacmirrorPath  $lib;
    system "mkdir", "-p", $flacMirrorDir if $flacMirrorDir ne "";

    if(-e $flacMirrorDir and -e $dir){
      print "\nflacmirror for: $lib\n";
      runOrDie "flacmirror $dir $flacMirrorDir";
    }
  }

  my $props = Klomp::Lib::getProperties;
  genSymlinkDir $$props{symlink} if defined $$props{symlink} and not $quick;
  genHistoryDir $$props{history} if defined $$props{history} and not $quick;
}

sub runOrDie(@){
  print "@_\n";
  system @_;
  die "\n'@_' failed\n" if $? != 0;
}

sub ensureDb(){
  print "ensuring klomp db\n";
  system "klomp-db -c 2>/dev/null";
  print "created db\n" if $? == 0;
}

sub getLibs(@){
  my @libs = @_;
  my @allLibs = Klomp::Lib::getAllLibNames;

  @libs = @allLibs if @libs == 0;

  my %okLibs = map {$_ => 1} @allLibs;
  my %givenLibs = map {$_ => 1} @libs;
  for my $lib(@libs){
    if(not defined $okLibs{$lib}){
      die "Unrecognized library name: $lib\nAvailable: @allLibs\n";
    }
  }
  for my $lib(@allLibs){
    if(not defined $givenLibs{$lib}){
      print "skipped: $lib\n";
    }
  }

  return @libs;
}

sub relPath($$){
  my ($absPath, $file) = @_;
  $absPath =~ s/\/$//;

  my $levels;
  while(length $absPath > 0){
    last if $file =~ s/^\Q$absPath\E\/?//;
    last if $absPath !~ s@/[^/]*$@@;
    $levels++;
  }
  my @paths;
  @paths = ("..")x$levels if $file !~ /^\//;
  push @paths, $file if length $file > 0;
  return join("/", @paths);
}

sub symRel($$){
  my ($srcFile, $destFile) = @_;
  my $destDir = $destFile;
  $destDir =~ s@/([^/]*)$@@;
  my $relFile = relPath $destDir, $srcFile;

  symlink $relFile, $destFile;
}

sub genSymlinkDir($){
  my $symDir = shift;
  print "\n\nrefreshing symlink dir $symDir\n";
  if(-d $symDir){
    system "find", $symDir, "-depth", "-type", "l", "-delete";
    system "find", $symDir, "-depth", "-type", "d", "-empty", "-delete";
  }
  die "Could not create $symDir, already exists\n" if -e $symDir;
  system "mkdir", "-p", $symDir;

  for my $lib(Klomp::Lib::getAllLibNames){
    my $libDir = Klomp::Lib::getLibraryPath $lib;
    for my $file(`find "$libDir" -maxdepth 1 -mindepth 1`){
      chomp $file;

      my $lnFile = $file;
      $lnFile =~ s/^.*\///;
      $lnFile = "$symDir/$lnFile";

      $lnFile .= "[$lib]" if -e $lnFile;
      $lnFile .= "-" . time if -e $lnFile;

      symRel $file, $lnFile;
    }
  }
}

sub genHistoryDir($){
  my $histDir = shift;
  my $libsDir = "$histDir/libs";
  my $dbDump = "$histDir/klomp-db";
  my $gitDir = "$histDir/.git";

  print "\n\nupdating history dir $histDir\n";
  runOrDie "mkdir", "-p", $histDir if not -d $histDir;
  die "Dir doesnt exist and couldnt mkdir: $histDir\n" if not -d $histDir;

  chdir $histDir;
  runOrDie "git", "init" if not -d $gitDir;
  die "Git dir doesnt exist and couldnt git init\n" if not -d $gitDir;

  runOrDie "rm", "-rf", $libsDir;
  runOrDie "mkdir", $libsDir;
  die "Dir doesnt exist and couldnt mkdir: $libsDir\n" if not -d $libsDir;

  my $klompDb = Klomp::Files::klompFile("db");
  my @dbDumpLines = `echo .dump | sqlite3 $klompDb`;
  my (@allLines, @insertLines);
  for my $line(@dbDumpLines){
    if($line =~ /^INSERT/){
      push @insertLines, $line;
    }else{
      @allLines = (@allLines, sort @insertLines);
      @insertLines = ();
      push @allLines, $line;
    }
  }
  @allLines = (@allLines, sort @insertLines);
  open FH, "> $dbDump" or die "Couldn't write $dbDump\n";
  print FH @allLines;
  close FH;

  for my $lib(Klomp::Lib::getAllLibNames){
    my $libDir = Klomp::Lib::getLibraryPath $lib;
    chdir $libDir;
    for my $file(`find -type f`){
      chomp $file;
      my $destFile = "$libsDir/$lib/$file";
      my $destDir = $destFile;
      $destDir =~ s@/[^/]*$@\/@;
      mkpath $destDir;
      open FH, "> $destFile";
      close FH;
    }
  }

  chdir $histDir;
  runOrDie "git", "add", "-A";
  system "git", "commit", "-a", "-m", "automatic commit";
  system "git", "push";
}

&main(@ARGV);
