#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Config;
use Klomp::Files;
use Klomp::History;
use Klomp::Lib;
use File::Path qw(mkpath);

my %opts = (
  quick      => [qw(-q --quick)],
  quick_db   => [qw(--quick-db)],
  db_only    => [qw(-d --db-only --no-utils)],
  utils_only => [qw(-u --utils-only --no-db)],
  no_git     => [qw(-n --no-git)],
);
my %optsFmt = map { $_ => join(" | ", @{$opts{$_}}) } keys %opts;
my %optsRegex = map { $_ => join("|", @{$opts{$_}}) } keys %opts;
my $allOptsRegex = join "|", sort values %optsRegex;

my $usage = "Usage:
  $0 [OPTS] [LIB LIB LIB ..]

  Compares library paths on the filesystem to the contents of the database,
    and makes updates to the database. Never modifies the files.

  Prompts before removing missing files, adds new files,
    and updates existing modified files.

  After updating the klompdb, if klomplib specifies a symlink dir,
    makes symlinks for all files in all libs in that dir,
    renaming the symlinks as necessary.
    Attempts to make the symlinks relative based on the libpath

  After updating the klompdb, if klomplib specifies a history dir,
    update the history.
    -takes a dump of the sqlite database
    -mirrors all library dirs with empty files
    -commit+push changes to a git repository

  OPTS:
    $optsFmt{quick}
      same as: --quick-db and --db-only
    $optsFmt{quick_db}
      pass --quick to klomp-db when adding songs
        {assume existing songs with the same path are unchanged}
      NOTE: --quick-db is implied if any <LIB>s are passed in
    $optsFmt{db_only}
      do not update symlink/history dirs (only update db)
      NOTE: --db-only is implied if any <LIB>s are passed in
    $optsFmt{utils_only}
      do not update any libs (only update symlink/history dirs if they exist)
    $optsFmt{no_git}
      never run git init, git add, git commit, or git push
";

sub tryrun(@);
sub runOrDie(@);
sub ensureDb();
sub getLibs(@);
sub genSymlinkDir($);
sub genHistoryDir($);
sub genHistoryDateCache();

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  my $quickDB = 0;
  my $useGit = 1;
  my $updateDB = 1;
  my $updateUtils = 1;
  while(@_ > 0 and $_[0] =~ /^($allOptsRegex)$/){
    my $opt = shift;
    if($opt =~ /^($optsRegex{quick})$/){
      $quickDB = 1;
      $updateUtils = 0;
    }elsif($opt =~ /^($optsRegex{quick_db})$/){
      $quickDB = 1;
    }elsif($opt =~ /^($optsRegex{db_only})$/){
      $updateUtils = 0;
    }elsif($opt =~ /^($optsRegex{utils_only})$/){
      $updateDB = 0;
    }elsif($opt =~ /^($optsRegex{no_git})$/){
      $useGit = 0;
    }
  }

  my @libs;
  if($updateDB){
    if(@_ > 0){
      $quickDB = 1;
      $updateUtils = 0;
    }
    @libs = getLibs(@_);
    ensureDb();
  }else{
    die "ERROR: LIB given when not updating db: $_[0]\n" if @_ > 0;
  }

  if($updateDB){
    for my $lib(@libs){
      print "\nHandling library: $lib\n";

      runOrDie 'klomp-db', '-m', $lib;
      if($quickDB){
        runOrDie 'klomp-db', '-u', '--quick', $lib;
      }else{
        runOrDie 'klomp-db', '-u', $lib;
      }
    }

    for my $lib(@libs){
      my $dir = Klomp::Lib::getLibraryPath $lib;
      my $flacMirrorDir = Klomp::Lib::getFlacmirrorPath  $lib;
      system "mkdir", "-p", $flacMirrorDir if $flacMirrorDir ne "";

      if(-e $flacMirrorDir and -e $dir){
        print "\nflacmirror for: $lib\n";
        runOrDie "flacmirror $dir $flacMirrorDir";
      }
    }
  }

  if($updateUtils){
    my $props = Klomp::Config::getProperties;
    genSymlinkDir $$props{symlink} if defined $$props{symlink};
    genHistoryDir $$props{history} if defined $$props{history};
    genHistoryDateCache if defined $$props{history};

    if($useGit and defined $$props{history} and -d $$props{history}){
      print "\n\nrunning git add/commit/push on $$props{history}\n";
      chdir $$props{history}
        or die "could not cd to $$props{history}\n";
      $ENV{PWD} = $$props{history};

      if(not -d ".git"){
        runOrDie "git", "init";
        die "git dir doesnt exist after git init\n" if not -d ".git";
      }

      runOrDie "git", "add", "-A";
      tryrun "git", "commit", "-a", "-m", "automatic commit";
      tryrun "git", "push";
    }
  }
}

sub tryrun(@){
  print "@_\n";
  system @_;
}
sub runOrDie(@){
  tryrun(@_);
  die "ERROR: failed to run '@_'\n" if $? != 0;
}

sub ensureDb(){
  print "ensuring klomp db\n";
  system "klomp-db -c 2>/dev/null";
  print "created db\n" if $? == 0;
}

sub getLibs(@){
  my @libs = @_;
  my @allLibs = Klomp::Lib::getAllLibNames;

  @libs = @allLibs if @libs == 0;

  my %okLibs = map {$_ => 1} @allLibs;
  my %givenLibs = map {$_ => 1} @libs;
  for my $lib(@libs){
    if(not defined $okLibs{$lib}){
      die "Unrecognized library name: $lib\nAvailable: @allLibs\n";
    }
  }
  for my $lib(@allLibs){
    if(not defined $givenLibs{$lib}){
      print "skipped: $lib\n";
    }
  }

  return @libs;
}

sub relPath($$){
  my ($absPath, $file) = @_;
  $absPath =~ s/\/$//;

  my $levels;
  while(length $absPath > 0){
    last if $file =~ s/^\Q$absPath\E\/?//;
    last if $absPath !~ s@/[^/]*$@@;
    $levels++;
  }
  my @paths;
  @paths = ("..")x$levels if $file !~ /^\//;
  push @paths, $file if length $file > 0;
  return join("/", @paths);
}

sub symRel($$){
  my ($srcFile, $destFile) = @_;
  my $destDir = $destFile;
  $destDir =~ s@/([^/]*)$@@;
  my $relFile = relPath $destDir, $srcFile;

  symlink $relFile, $destFile;
}

sub genSymlinkDir($){
  my $symDir = shift;
  print "\n\nrefreshing symlink dir $symDir\n";
  if(-d $symDir){
    system "find", $symDir, "-depth", "-type", "l", "-delete";
    system "find", $symDir, "-depth", "-type", "d", "-empty", "-delete";
  }
  die "Could not create $symDir, already exists\n" if -e $symDir;
  system "mkdir", "-p", $symDir;

  for my $lib(Klomp::Lib::getAllLibNames){
    my $libDir = Klomp::Lib::getLibraryPath $lib;
    for my $file(`find "$libDir" -maxdepth 1 -mindepth 1`){
      chomp $file;

      my $lnFile = $file;
      $lnFile =~ s/^.*\///;
      $lnFile = "$symDir/$lnFile";

      $lnFile .= "[$lib]" if -e $lnFile;
      $lnFile .= "-" . time if -e $lnFile;

      symRel $file, $lnFile;
    }
  }
}

sub genHistoryDir($){
  my $histDir = shift;
  my $libsDir = "$histDir/libs";
  my $dbDump = "$histDir/klomp-db";

  print "\n\nupdating history dir $histDir\n";
  runOrDie "mkdir", "-p", $histDir if not -d $histDir;
  die "Dir doesnt exist and couldnt mkdir: $histDir\n" if not -d $histDir;

  chdir $histDir;

  runOrDie "rm", "-rf", $libsDir;
  runOrDie "mkdir", $libsDir;
  die "Dir doesnt exist and couldnt mkdir: $libsDir\n" if not -d $libsDir;

  my $klompDb = Klomp::Files::klompFile("db");
  my @dbDumpLines = `echo .dump | sqlite3 $klompDb`;
  my (@allLines, @insertLines);
  for my $line(@dbDumpLines){
    if($line =~ /^INSERT/){
      push @insertLines, $line;
    }else{
      @allLines = (@allLines, sort @insertLines);
      @insertLines = ();
      push @allLines, $line;
    }
  }
  @allLines = (@allLines, sort @insertLines);
  open FH, "> $dbDump" or die "Couldn't write $dbDump\n";
  print FH @allLines;
  close FH;

  for my $lib(Klomp::Lib::getAllLibNames){
    my $libDir = Klomp::Lib::getLibraryPath $lib;
    chdir $libDir;
    for my $file(`find -type f`){
      chomp $file;
      my $destFile = "$libsDir/$lib/$file";
      my $destDir = $destFile;
      $destDir =~ s@/[^/]*$@\/@;
      mkpath $destDir;
      open FH, "> $destFile";
      close FH;
    }
  }
}

sub genHistoryDateCache(){
  print "\n\ngenerating date cache from history\n";
  my $file = Klomp::Files::klompFile("datecache");
  runOrDie "rm", "-f", $file;

  my $cache = Klomp::History::getDateCache();
  open FH, "> $file" or die "Could not write $file\n";
  for my $path(sort keys %$cache){
    print FH "$$cache{$path} $path\n";
  }
  close FH;
}

&main(@ARGV);
