#!/usr/bin/perl
use strict;
use warnings;
use IPC::Run qw(run);
use Getopt::Long qw(GetOptionsFromArray :config bundling);

my $usage = "Usage:
  $0 [OPTS] FILENAME FILENAME ..
    ffmpeg {or avconv} frontend to print the durations of sound files
    Prints one per line:  'H:MM:SS FILENAME' or 'M:SS FILENAME'
  $0 -h|--help
    Print this message

  -s, --seconds
     Print durations in 'S.SS' instead of 'M:SS' or 'H:MM:SS'
  -t, --total
     Print total of all files instead of individually.
  -n, --nofilename
     Do not print the filename after the duration.
";

sub selectExec(@);
sub getLen($);
sub formatLenS($);
sub formatLenHMS($);

sub main(@){
  my ($help, $seconds, $total, $nofilename);
  my $ok = GetOptionsFromArray(\@_,
    "h|help"       => \$help,
    "s|seconds"    => \$seconds,
    "t|total"      => \$total,
    "n|nofilename" => \$nofilename,
  ) or die $usage;
  my @files = @_;

  die $usage if not $ok or @files == 0 or $help;

  my $lenTotal = 0;
  for my $file(@_){
    my $len = getLen $file;
    $lenTotal += $len;
    my $fmt = $seconds ? formatLenS $len : formatLenHMS $len;
    $fmt .= " $file" unless $nofilename;
    $fmt .= "\n";
    print $fmt unless $total;
  }
  my $fmtTotal = $seconds ? formatLenS $lenTotal : formatLenHMS $lenTotal;
  print "$fmtTotal\n" if $total;
}

sub selectExec(@){
  for my $cmd(@_){
    my $path = `which $cmd`;
    chomp $path;
    return $path if $? == 0;
  }
}

sub getLen($){
  my $file = shift;
  die "file not found: $file\n" unless -e $file;

  my @cmds = ("ffmpeg", "avconv");
  my $exec = selectExec @cmds;
  die "Could not find these on path: @cmds\n" if not defined $exec;

  my $info;
  run [$exec, "-i", $file], '>&', \$info;
  if($info =~ /Duration: (\d+):(\d+):(\d+(?:\.\d+))/){
    return $3 + ($2*60) + ($1*60*60);
  }else{
    die "Unknown length for input: $file\n";
  }
}

sub formatLenS($){
  return sprintf "%.2f", $_[0];
}
sub formatLenHMS($){
  my $len = shift;
  $len = int(0.5 + $len);
  my $h = int($len / (60*60));
  my $m = int($len % (60*60) / (60));
  my $s = $len - ($m*60) - ($h*60*60);
  $s = "0$s" if $s < 10;

  if($h == 0){
    return "$m:$s";
  }else{
    $m = "0$m" if $m < 10;
    return "$h:$m:$s";
  }
}

&main(@ARGV);
