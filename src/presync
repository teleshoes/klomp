#!/usr/bin/perl
use strict;
use warnings;

my $PRESYNC = 'presync';

sub main($$);
sub getPaths($);
sub diffPaths($$);
sub getInfo($\@);
sub findMoved(\@\@);
sub execCommands($\@);
sub writeTempFile($);
sub dieUsage();

my $src = shift;
$src = '' if not defined $src;
my $dest = shift;
$dest = '' if not defined $dest;

if(@ARGV > 0 or
  ($src !~ /.*:.*/ and !-d $src) or
  ($dest !~ /.*:.*/ and !-d $dest)){
  dieUsage();
}

sub main($$){
  my $src = shift;
  my $dest = shift;
  $src =~ s/\/$//;
  $dest =~ s/\/$//;

  $src =~ s/'/'\\''/g;
  $dest =~ s/'/'\\''/g;

  my $diff = diffPaths $src, $dest;
  my @missing = @{$$diff[0]};
  my @added = @{$$diff[1]};
  my @missingInfo = getInfo($src, @missing);
  my @addedInfo = getInfo($dest, @added);
  my @movedCmds = @{findMoved @missingInfo, @addedInfo};
  if(@movedCmds > 0){
    print execCommands $dest, @movedCmds;
  }
}

sub parseInfo($){
  my $line = shift;
  if($line =~ /^([^ ]+)  (.*)$/){
    my $info = $1;
    my $name = $2;
    $name =~ s/\n$//;
    my $basename = $name;
    $basename =~ s/^.*\///;
    return [$name, $basename, $info];
  }
}

sub findMoved(\@\@){
  my @missing = @{shift()};
  my @added = @{shift()};
  my @missingInfo;
  for my $m(@missing){
    push @missingInfo, parseInfo $m;
  }
  my @addedInfo;
  for my $a(@added){
    push @addedInfo, parseInfo $a;
  }

  my %mkdirCmds;
  my @moveCmds;
  for my $mArr(@missingInfo){
    my $destDir = $$mArr[0];
    $destDir =~ s/\/[^\/]*$//;
    for my $aArr(@addedInfo){
      if($$mArr[1] eq $$aArr[1] && $$mArr[2] eq $$aArr[2]){
        $destDir =~ s/'/'\\''/g;
        $mkdirCmds{"mkdir -p '$destDir'\n"} = 1;
        my $src = $$aArr[0];
        my $dest = $$mArr[0];
        $src =~ s/'/'\\''/g;
        $dest =~ s/'/'\\''/g;
        my $cmd = "if [ ! -e '$dest' ]; then mv '$src' '$dest'; fi";
        push @moveCmds, "$cmd\n";
        last;
      }
    }
  }
  my @cmds = (keys %mkdirCmds, @moveCmds);
  return \@cmds;
}
sub getInfo($\@){
  my $dir = shift;
  my @files = @{shift()};
  my @cmds;
  for my $file(@files){
    chomp $file;
    my $cmd;
    #$cmd = "md5sum $file";
    $cmd = "stat -c '%s_%Y  %n' '$file'";
    #$cmd = "stat -c '%s  %n' \$f";
    push @cmds, $cmd;
  }
  my @info = execCommands($dir, @cmds);
  return @info;
}

sub getPaths($){
  my $src = shift;
  my $findCmd;
  if($src =~ /^((?:.+@).+):(.*)$/){
    $findCmd = "ssh '$1' '".
      "if [ -d '$2' ]; then " .
        "cd '$2'; " .
        "find -type f; " .
      "else " .
        "exit 1; " .
      "fi'";
  }else{
    $findCmd = "cd '$src'; find -type f";
  }
  my @paths = `$findCmd`;
  die "Could not find file $src\nCommand run:\n$findCmd\n" if $?;
  for my $path(@paths){
    $path =~ s/^\.\///;
    $path =~ s/'/'\\''/g;
  }
  return \@paths;
}
sub diffPaths($$){
  my $src = shift;
  my $dest = shift;
  my @srcPaths = @{getPaths $src};
  my @destPaths = @{getPaths $dest};
  my %srcHash;
  my %destHash;
  for my $srcPath(@srcPaths){
    $srcHash{$srcPath} = 1;
  }
  for my $destPath(@destPaths){
    $destHash{$destPath} = 1;
  }
  my @missing;
  my @added;
  for my $srcKey(keys %srcHash){
    push @missing, $srcKey if not defined $destHash{$srcKey};
  }
  for my $destKey(keys %destHash){
    push @added, $destKey if not defined $srcHash{$destKey};
  }
  return [\@missing, \@added];
}

sub execCommands($\@){
  my $dir = shift;
  my @commands = @{shift()};
  my $host = undef;
  if($dir =~ /^((?:.+@).+):(.*)$/){
    $host = $1;
    $dir = $2;
  }

  my $tmp = writeTempFile join "\n", @commands;
  my $cmd =
    "COMMANDS=`cat $tmp`; " .
    "rm $tmp; " .
    "cd '$dir'; " .
    "IFS=\$'\n'; " .
    "for command in \$COMMANDS; do " .
      "bash -c \$command; " .
    "done";
  if(defined $host){
    system "scp $tmp $host:$tmp";
    system "rm $tmp";
    $cmd =~ s/'/'\\''/g;
    return `ssh $host '$cmd'`;
  }else{
    return `$cmd`;
  }
}

our $count = 0;
sub writeTempFile($){
  my $content = shift;
  my $fname = '.presync_tmp_' . time . '_' . $count++;
  open FH, "> $fname" or die "Could not open $fname for writing";
  print FH $content;
  close FH;
  return $fname;
}

sub dieUsage(){
  die
"Usage: $0 [[USER\@]HOST:]SRC_DIR [[USER\@]HOST:]DEST_DIR
SRC and DEST can be remote or local.
Script will compare DEST to SRC, find files that are similar in DEST
but in a different relative location, and move them to match. It will
create subdirs in DEST as necessary to move the files, but will never
replace existing files or rm files or directories.
e.g.:
src/one/a
src/one/b
src/one/c
src/two/d
src/two/e
src/two/f

dest/a
dest/b
dest/c
dest/d
dest/bananacake/e
dest/two/d
=>
dest/d
dest/one/a
dest/one/b
dest/one/c
dest/two/d
dest/two/e
dest/bananacake/
";
}

&main($src, $dest);
