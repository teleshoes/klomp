#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(dirname basename);
use Time::HiRes qw(time);

my $EXEC = basename $0;

sub getFileInfo($@);
sub getRelFiles($$);
sub execCommands($@);
sub nowMillis();

my $usage = "Usage:
  $EXEC [[SRC_USER\@]SRC_HOST:]SRC_DIR [[DEST_USER\@]DEST_HOST:]DEST_DIR
    move files on DEST to match SRC
      -never overwrite any existing files
      -never delete any files or directories
      -never update any file mtimes
      -SRC and DEST can be local or remote (run `CMD` or `ssh user\@host CMD`)

      -recursively list all relative paths of files under SRC_DIR and DEST_DIR
        -do not obtain mtime/fsize info, just relative paths, and ignore dirs
        -find MISSING files - relative path present on SRC, not present on DEST
        -find ADDED files - relative path present on DEST, not present on SRC
        -ignore all STABLE files - relative path is present on SRC and DEST

      -for every ADDED file, generate stat command to find MTIME and FSIZE
        -open a bash shell on DEST, write the commands to it, read the output
      -for every MISSING file, generate stat command to find MTIME and FSIZE
        -open a bash shell on SRC, write the commands to it, read the output

      -compare each ADDED file on DEST to each MISSING file on SRC
        -if ADDED and MISSING have the same MTIME and FSIZE:
          -append to MOVE_COMMANDS mkdir similar to:
            mkdir -p `dirname '\$DEST_DIR'/'\$MISSING'`
          -append to MOVE_COMMANDS mv similar to:
            mv --no-clobber '\$DEST_DIR'/'\$ADDED' '\$DEST_DIR'/'\$MISSING'
      -open a bash shell on DEST, and write MOVE_COMMANDS to it

    e.g.:  (assume files with the same basename have the same mtime+fsize)
    presync src/ dest/
      src/one/a           =>    src/one/a
      src/one/b           =>    src/one/b
      src/one/c           =>    src/one/c
      src/two/d           =>    src/two/d
      src/two/e           =>    src/two/e
      src/two/f           =>    src/two/f

      dest/a              =>    dest/one/a
      dest/b              =>    dest/one/b
      dest/c              =>    dest/one/c
      dest/d              =>    dest/d
      dest/bananacake/e   =>    dest/two/e
      dest/two/d          =>    dest/two/d
                          =>    dest/bananacake/
";

sub main(@){
  die $usage if @_ != 2;
  my ($src, $dest) = @_;

  my ($srcHost, $srcDir);
  if(-d $src){
    ($srcHost, $srcDir) = (undef, $src);
  }elsif($src =~ /^((?:.+@)?.+):(.*)$/){
    ($srcHost, $srcDir) = ($1, $2);
  }else{
    die "$src must be a local or remote dir\n";
  }

  my ($destHost, $destDir);
  if(-d $dest){
    ($destHost, $destDir) = (undef, $dest);
  }elsif($dest =~ /^((?:.+@)?.+):(.*)$/){
    ($destHost, $destDir) = ($1, $2);
  }else{
    die "$dest must be a local or remote dir\n";
  }

  $srcDir =~ s/\/+$//;
  $destDir =~ s/\/+$//;

  my %srcRelFiles = map {$_ => 1} getRelFiles($srcHost, $srcDir);
  my %destRelFiles = map {$_ => 1} getRelFiles($destHost, $destDir);

  my @added = grep {not defined $srcRelFiles{$_}} sort keys %destRelFiles;
  my @missing = grep {not defined $destRelFiles{$_}} sort keys %srcRelFiles;

  my $addedInfo = getFileInfo($destHost, $destDir, @added);
  my $missingInfo = getFileInfo($srcHost, $srcDir, @missing);

  my %fileMoves;
  for my $destRelFile(@added){
    my $destInfo = $$addedInfo{$destRelFile};
    if(not defined $destInfo){
      die "ERROR: stat did not find $destRelFile on dest\n";
    }
    for my $srcRelFile(@missing){
      my $srcInfo = $$missingInfo{$srcRelFile};
      if(not defined $srcInfo){
        die "ERROR: stat did not find $srcRelFile on src\n";
      }
      if($$srcInfo{fsize} == $$destInfo{fsize} and $$srcInfo{mtime} == $$destInfo{mtime}){
        $fileMoves{$destRelFile} = $srcRelFile;
        last;
      }
    }
  }


  my @mvCommands;
  for my $destRelFile(sort keys %fileMoves){
    my $srcRelFile = $fileMoves{$destRelFile};

    my $dir = $destDir;
    $dir =~ s/'/'\\''/g;

    my $relDirname = dirname $srcRelFile;
    $relDirname =~ s/'/'\\''/g;
    push @mvCommands, "mkdir -p '$dir/$relDirname'";

    $destRelFile =~ s/'/'\\''/g;
    $srcRelFile =~ s/'/'\\''/g;
    push @mvCommands, "mv --no-clobber '$dir/$destRelFile' '$dir/$srcRelFile'";
  }

  print "RUNNING:\n";
  print "$_\n" foreach @mvCommands;

  print execCommands $destHost, @mvCommands;
}

sub getFileInfo($@){
  my ($host, $dir, @relFiles) = @_;
  my @cmds;
  for my $relFile(@relFiles){
    my $file = "$dir/$relFile";
    $file =~ s/'/'\\''/g;
    push @cmds, "stat -c '%s_%Y_%n' '$file'";
  }
  my @statLines = split /\n/, execCommands($host, @cmds);
  my $info = {};
  for my $line(@statLines){
    if($line =~ /^(\d+)_(\d+)_(.+)$/){
      my ($fsize, $mtime, $file) = ($1, $2, $3);
      my $relFile;
      if($file =~ /^$dir\/(.+)$/){
        $relFile = $1;
      }else{
        die "ERROR: malformed output from stat command: $line\n";
      }
      $$info{$relFile} = {fsize => $fsize, mtime => $mtime};
    }else{
      die "ERROR: malformed output from stat command: $line\n";
    }
  }
  return $info;
}

sub getRelFiles($$){
  my ($host, $dir) = @_;

  $dir =~ s/'/'\\''/g;

  my $cmd = "find '$dir/' -type f";
  $cmd = "ssh $host $cmd" if defined $host;

  my @files = `$cmd`;

  my @relFiles;
  for my $file(@files){
    if($file =~ /^$dir\/(.+)$/){
      push @relFiles, $1;
    }else{
      die "ERROR: malformed find output $file\n";
    }
  }

  return @relFiles;
}

sub execCommands($@){
  my ($host, @commands) = @_;

  my $tmpOutFile = "/tmp/$EXEC-out-" . nowMillis();

  if(defined $host){
    open CMD, "|-", "ssh $host bash >$tmpOutFile 2>&1";
  }else{
    open CMD, "|-", "bash >$tmpOutFile 2>&1";
  }
  for my $cmd(@commands){
    print CMD "$cmd\n";
  }
  print CMD "exit;\n";
  close CMD;

  my $out = `cat $tmpOutFile`;
  system "rm", $tmpOutFile;

  return $out;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
