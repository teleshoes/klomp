#!/usr/bin/perl
use strict;
use warnings;
use threads;
use threads::shared;
use lib "/opt/klomp/lib";
use Klomp::Files;
use Klomp::Duration qw(getDuration cmdExists formatTimeS);
use Klomp::Lib;
use Klomp::Tag;

my $threaded = 1;
my $jobCount = 4;
my $songsPerJob = 50;
$jobCount = 1 if not $threaded;
my %threads;

my @songSuffixes = ('mp3', 'flac', 'ogg', 'm4a', 'wma', 'wav');
                    #aiff

my @infoCols = qw(library relpath filesize modified md5sum acoustid duration);
my @tagCols = qw(title artist albumartist album number date genre);
my @guessTagCols = map{$_ . "_guess"} @tagCols;
my @searchableCols = (@infoCols, @tagCols);
my @allCols = (@infoCols, @tagCols, @guessTagCols);

my $defaultDb = Klomp::Files::klompFile("db");

sub fsize($);
sub mtime($);
sub md5sum($);
sub shell(@);
sub shellQuiet(@);
sub runSql($$;@);
sub runSqlBatch($\@;@);
sub cols($);
sub addSongs($$$$);
sub startThread($$$$$);
sub joinThread($);
sub isThreadRunning($);
sub handleAddSongJob($$$$$);
sub getSongRow($$$$$);
sub getSongInsertStmt($);
sub getSongDeleteStmt($);
sub wrapGuessCol($);
sub readLibMetadata($$);
sub acoustidRegex();
sub chunks($@);
sub create($);
sub update($$$);
sub missing($$);
sub add($$$$);
sub search($$$$$$);
sub fixQuery($);
sub validateQuery($);
sub getSubQuerySql($$);
sub getNumericSubQuerySql($);
sub parseNum($);
sub info($$);

my $usage = "Usage:
 $0 [db-path] -c|--create
   Make an empty sqlite db with necessary structures

 $0 [db-path] -u|--update [--quick] [lib lib ...]
   Add or update the info in the db for music files in the given libs (or all)

 $0 [db-path] -m|--missing [--quick] [lib lib ...]
   Check for missing files in given libs (or all), and prompt for removal.

 $0 [db-path] -a|--add lib song-rel-path
   Add or update the info in the db for the file at song-rel-path in lib

 $0 [db-path] -i|--info [song-rel-path or song-abs-path]
   Query for the info for a song, given the path of the song

 $0 [db-path] -s|--search query [OPTS]
   Query for relative paths to songs in given libs (or all), or more info.
   optional OPTS:
   -v|--verbose            print SQL to STDERR before running it
   --lib lib               optional libs to search (all if not given)
                           {can appear multiple times}
   -l|--limit LIMIT        optional integer limit on number of rows returned
   --col COL               optional col; returned as csv if any specified
                           {can appear multiple times}
                           by default, just relpath is returned.
                           allowed values: \n   @searchableCols

 [db-path] is optional and cannot start with a hyphen. {arg parsing => im lazy}
 if not given, the default is '$defaultDb'
";

sub main(@){
  die $usage if @_ == 0 or $_[0] =~ /^(-h|--help)/;

  my $db;
  if($_[0] !~ /^-/){
    $db = shift;
  }else{
    $db = $defaultDb;
  }

  my $cmd = shift() || '';

  if($cmd =~ /^(-c|--create)$/ and @_ == 0){
    die "'$db' exists already\n" if -e $db;
    create($db);
  }elsif($cmd =~ /^(-u|--update)$/){
    die "'$db' does not exist\n" if not -f $db;
    my $quick = 0;
    if(@_ > 0 and $_[0] =~ /^(--quick)$/){
      $quick = 1;
      shift;
    }
    update($db, $quick, \@_);
  }elsif($cmd =~ /^(-m|--missing)$/){
    die "'$db' does not exist\n" if not -f $db;
    missing($db, \@_);
  }elsif($cmd =~ /^(-a|--add)$/ and @_ >= 2){
    die "'$db' does not exist\n" if not -f $db;
    my $quick = 0;
    if(@_ > 0 and $_[0] =~ /^(--quick)$/){
      $quick = 1;
      shift;
    }
    my $lib = shift;
    my $songRelPath = shift;
    add($db, $lib, $quick, $songRelPath);
  }elsif($cmd =~ /^(-i|--info)$/ and @_ == 1){
    die "'$db' does not exist\n" if not -f $db;
    my $songRelPath = shift;
    info($db, $songRelPath);
  }elsif($cmd =~ /^(-s|--search)$/ and @_ >= 1){
    die "'$db' does not exist\n" if not -f $db;
    my $query = shift;

    my $verbose = 0;
    my @libs;
    my $limit = 0;
    my @cols;
    my $mode = 'playlist';
    while(@_){
      my $arg = shift;
      if($arg =~ /^(-v|--verbose)$/){
        $verbose = 1;
      }elsif($arg =~ /^(-l|--limit)$/ && @_>0){
        $limit = shift;
        die $usage if $limit !~ /^\d+$/;
      }elsif($arg =~ /^(--col)$/ && @_>0){
        my $col = shift;
        my %isAllowed = map {$_ => 1} @searchableCols;
        die $usage if not defined $isAllowed{$col};
        push @cols, $col;
      }elsif($arg =~ /^(--lib)$/ && @_>0){
        my $lib = shift;
        push @libs, $lib;
      }else{
        die $usage;
      }
    }

    search($db, $query, $verbose, $limit, \@cols, \@libs);
  }else{
    die $usage;
  }
}


sub create($){
  my $db = shift;
  if(-e $db){
    die "$db exists already\n";
  }
  runSql($db,
    "create table Songs ("
      . (join "", map {"$_ varchar,"} @allCols)
      . "PRIMARY KEY (library, relpath)"
    . ");");
}

sub update($$$){
  my $db = shift;
  my $quick= shift;
  my @libs = @{shift()};
  for my $lib(@libs){
    my $libpath = Klomp::Lib::getLibraryPath $lib;
    if(not -d $libpath){
      die "Invalid library path $libpath\n";
    }
    chdir $libpath;

    my @find = ("find", ".", "-false",
      map {("-or", "-iname", "*.$_")} @songSuffixes
    );

    my @songRelPaths = shell @find;
    @songRelPaths = sort @songRelPaths;
    chomp foreach @songRelPaths;
    s/^.\/// foreach @songRelPaths;

    addSongs($db, $lib, $quick, \@songRelPaths);
  }
}

sub missing($$){
  my $db = shift;
  my @libs = @{shift()};
  for my $lib(@libs){
    chdir $lib;
    checkMissing($db, $lib);
  }
}

sub add($$$$){
  my $db = shift;
  my $lib = shift;
  my $quick = shift;
  my $songRelPath = shift;

  my @songRelPaths;
  push @songRelPaths, $songRelPath;
  addSongs($db, $lib, $quick, \@songRelPaths);
}

sub quoteTokenize($){
  my $query = shift;

  $query =~ s/~/~~/g;
  my $quoteTokens = {};

  my $newQuery = '';
  my $endOfLastQuote = 0;

  my $tokenId = 0;

  my $startQuote=0;
  my $endQuote;

  my $offset=0;

  my $len = length $query;
  while($offset >= 0 and $offset<$len){
    last if ($offset = index $query, '"', $offset) < 0;
    $startQuote = $offset;
    $offset++;
    while($offset >= 0 and $offset<$len){
      last if ($offset = index $query, '"', $offset) < 0;
      $endQuote = $offset;
      $offset++;
      my $nextChar = substr $query, $endQuote+1, 1;
      if($nextChar eq '"'){
        $offset++;
      }else{
        my $quoteToken = substr $query, $startQuote+1, $endQuote-$startQuote-1;
        $quoteToken =~ s/""/"/g;
        $newQuery .= substr $query, $endOfLastQuote, $startQuote-$endOfLastQuote;
        $endOfLastQuote = $endQuote+1;
        $newQuery .= "~$tokenId~";
        $$quoteTokens{$tokenId++} = $quoteToken;
        last;
      }
    }
  }
  $newQuery .= substr $query, $endOfLastQuote, $len-$endOfLastQuote;

  return ($newQuery, $quoteTokens);
}
sub quoteUntokenize($$){
  my ($query, $quoteTokens) = @_;

  for my $tokenId(keys %$quoteTokens){
    my $token = $$quoteTokens{$tokenId};
    $query =~ s/~$tokenId~/$token/;
  }

  $query =~ s/~~/~/g;
  return $query;
}

sub search($$$$$$){
  my $db = shift;
  my $query = shift;
  my $verbose = shift;
  my $limit = shift;
  my @cols = @{shift()};
  my @libs = @{shift()};

  my @allLibs = Klomp::Lib::getAllLibNames;
  my @defaultLibs = Klomp::Lib::getDefaultLibNames;
  my %okLibs = map {$_ => 1} @allLibs;

  my $all = 0;
  my $libRegex = qr/^\@([a-zA-Z0-9]+)/;
  while($query =~ /$libRegex/){
    my $lib = $1;
    if($lib eq 'all'){
      $query =~ s/$libRegex//;
      $all = 1;
    }elsif(defined $okLibs{$lib}){
      $query =~ s/$libRegex//;
      push @libs, $lib;
    }else{
      last;
    }
  }

  @libs = @defaultLibs if @libs == 0;
  @libs = () if $all;

  my $libWhere = '1=1';
  if(@libs > 0){
    $libWhere = "library in (" . (join ', ', map {"'$_'"} @libs) . ")";
  }

  if(not @cols){
    @cols = ('relpath');
  }

  my %isTagCol = map{$_ => 1} @tagCols;

  my @guessCols;
  my @namedCols;
  my @orderCols;
  for my $col(@cols){
    my $guessCol;
    if(defined $isTagCol{$col}){
      $guessCol = wrapGuessCol($col);
    }else{
      $guessCol = $col;
    }
    push @guessCols, $guessCol;
    push @namedCols, "$guessCol $col";
    if($col eq 'number'){
      push @orderCols, "number_guess";
    }else{
      push @orderCols, $guessCol;
    }
  }

  my $orderBy = "ORDER BY\n" . join(",\n      ", @orderCols);

  my $lim = $limit > 0 ? "LIMIT $limit" : '';

  my $quoteTokens;
  ($query, $quoteTokens) = quoteTokenize $query;

  $query =~ s/^\s*//;
  $query =~ s/\s*$//;
  $query =~ s/\s*  \(    \s*/~lparens~/gx;
  $query =~ s/\s*  \)    \s*/~rparens~/gx;
  $query =~ s/\s*  \&\&  \s*/~and~/gx;
  $query =~ s/\s*  \|\|  \s*/~or~/gx;
  $query =~ s/\s*  \+\+  \s*/~or~/gx;
  $query =~ s/\s+/~and~/g;

  my $queryParts = [];
  while($query =~ /(.*?)(~lparens~|~rparens~|~and~|~or~|$)/g){
    push @$queryParts, ['subquery', $1] if $1 ne "";
    push @$queryParts, ["$2"] if $2 ne "";
  }

  $queryParts = fixQuery $queryParts;

  my $where = '';
  for my $part(@$queryParts){
    my $type = $$part[0];
    if($type eq "~lparens~"){
      $where .= "\n (\n";
    }elsif($type eq "~rparens~"){
      $where .= "\n )\n";
    }elsif($type eq "~and~"){
      $where .= "\n  and\n";
    }elsif($type eq "~or~"){
      $where .= "\n  or\n";
    }elsif($type eq "subquery"){
      my $q = $$part[1];
      $where .= "  (" . getSubQuerySql($q, $quoteTokens) . "\n  )";
    }else{
      die "Unknown query part type: $type\n";
    }
  }
  $where = '1=1' if @$queryParts == 0;

  my $selCols = join "\n       ,", @namedCols;
  my $sql = ''
    . "select $selCols \n"
    . "from Songs \n"
    . "where $libWhere and (\n$where\n)\n$orderBy\n$lim;";

  print STDERR "--\n$sql\n--\n" if $verbose;

  if(@cols > 1){
    print runSql $db, $sql, '-csv';
  }else{
    print runSql $db, $sql;
  }
}

sub fixQuery($){
  my $queryParts = shift();
  my $newQueryParts = [];

  my $trueSubquery = ["subquery", ""];

  my $parensDepth = 0;
  for(my $i=0; $i<@$queryParts; $i++){
    my $type = $$queryParts[$i][0];
    my $prevType = $i-1 >= 0 ? $$queryParts[$i-1][0] : 'undef';
    my $nextType = $i+1 < @$queryParts ? $$queryParts[$i+1][0] : 'undef';

    if($type eq "~rparens~" and $prevType eq "~lparens~"){
      push @$newQueryParts, $trueSubquery;
      $prevType = "subquery";
    }
    if($type eq "~lparens~" and $prevType =~ /^(~rparens~|subquery)$/){
      push @$newQueryParts, ["~and~"];
      $prevType = "~and~";
    }
    if($prevType eq "~rparens~" and $type =~ /^(~lparens~|subquery)$/){
      push @$newQueryParts, ["~and~"];
      $prevType = "~and~";
    }

    if($type eq "~lparens~"){
      $parensDepth++;
    }elsif($type eq "~rparens~"){
      $parensDepth--;
    }

    push @$newQueryParts, $$queryParts[$i];

    if($nextType eq "undef" and $type !~ /^(subquery|~rparens~)$/){
      push @$newQueryParts, $trueSubquery;
      $prevType = "subquery";
    }
  }
  while($parensDepth > 0){
    push @$newQueryParts, ["~rparens~"];
    $parensDepth--;
  }

  validateQuery $newQueryParts;
  return $newQueryParts;
}

sub validateQuery($){
  my $queryParts = shift();

  my $parensDepth = 0;
  for(my $i=0; $i<@$queryParts; $i++){
    my $type = $$queryParts[$i][0];
    my $prevType = $i-1 >= 0 ? $$queryParts[$i-1][0] : 'undef';
    my $nextType = $i+1 < @$queryParts ? $$queryParts[$i+1][0] : 'undef';

    if($nextType eq "undef" and $type !~ /^(subquery|~rparens~)$/){
      die "'$type' cannot be at the end of the query\n";
    }

    my @okPrev;
    if($type eq "subquery"){
      @okPrev = qw(undef ~lparens~ ~and~ ~or~);
    }elsif($type eq "~lparens~"){
      @okPrev = qw(undef ~lparens~ ~and~ ~or~);
      $parensDepth++;
    }elsif($type eq "~rparens~"){
      @okPrev = qw(subquery ~rparens~);
      $parensDepth--;
      die "missing opening parenthesis\n" if $parensDepth < 0;
    }elsif($type eq "~and~"){
      @okPrev = qw(subquery ~rparens~);
    }elsif($type eq "~or~"){
      @okPrev = qw(subquery ~rparens~);
    }
    my %okPrevHash = map {$_=>1} @okPrev;
    if(not defined $okPrevHash{$prevType}){
      die "'$type' is after '$prevType': only '@okPrev' is allowed\n";
    }
  }
  die "missing closing parenthesis\n" if $parensDepth != 0;
}

# turns search words into SQL queries
sub getSubQuerySql($$){
  my ($q, $quoteTokens) = @_;

  return "1=1" if $q =~ /^\s*$/;

  my $numericSql = getNumericSubQuerySql $q;
  return $numericSql if defined $numericSql;

  my %columnNames = (
    t => ["title", "title_guess"],
    l => ["album", "album_guess"],
    a => ["artist", "artist_guess", "albumartist", "albumartist_guess"],
    g => ["genre"],
    p => ["relpath"],
    n => ["number", "number_guess"],
    d => ["duration"],
  );

  my $negate = $q =~ s/^!//;

  my $colStr;
  if($q =~ s/^@([tlagpnd]+)//){
    $colStr = $1;
  }else{
    $colStr = "tla";
  }
  my %colChars = map {$_=>1} split //, $colStr;
  my @columns = map {@{$columnNames{$_}}} keys %colChars;

  my $startAnchor = $q =~ s/^\^//;
  my $endAnchor = $q =~ s/\$$//;

  $q = quoteUntokenize $q, $quoteTokens;

  $q =~ s/'/''/g;
  $q =~ s/%/\\%/g;

  $q = "%$q" unless $startAnchor;
  $q = "$q%" unless $endAnchor;
  $q = "'$q'";

  my $compOp = $negate ? "not like" : "like";
  my $joinOp = $negate ? "and" : "or";

  return join(" $joinOp ", map{"\n      $_ $compOp $q"} @columns);
}

# adds special numeric comparison cases for some columns
sub getNumericSubQuerySql($){
  my $q = shift;

  my %numericColumns = (
    n => "number_guess",
    d => "duration",
  );

  my $numColsRe = join "|", keys %numericColumns;
  my $opRe = "<|<=|>|>=|=";
  my $floatRe = "\\d+(?:\\.\\d+)?";
  my $numRe = "$floatRe|$floatRe:$floatRe|$floatRe:$floatRe:$floatRe";

  if($q =~ /^\@($numColsRe)($opRe)($numRe)$/){
    my ($col, $op, $val) = ($numericColumns{$1}, $2, parseNum($3));
    return "\n      (abs($col) $op $val)";
  }elsif($q =~ /^\@($numColsRe)\[($numRe)-($numRe)\]$/){
    my ($col, $min, $max) = ($numericColumns{$1}, parseNum($2), parseNum($3));
    return "\n      ($min <= abs($col) and abs($col) <= $max)";
  }

  return undef;
}

sub parseNum($){
  my $n = shift;
  my $floatRe = "\\d+(?:\\.\\d+)?";
  return $3 + $2*60 + $1*60*60 if $n =~ /($floatRe):($floatRe):($floatRe)/;
  return $2 + $1*60 if $n =~ /($floatRe):($floatRe)/;
  return $1 if $n =~ /($floatRe)/;
  return 0;
}

sub info($$){
  my $db = shift;
  my $songRelPath = shift;

  my $libWhere = '1=1';
  for my $lib(Klomp::Lib::getAllLibNames()){
    my $libpath = Klomp::Lib::getLibraryPath $lib;
    if($songRelPath =~ s/^$libpath//){
      $libWhere = "library = '$lib'";
      last;
    }
  }
  $songRelPath =~ s/^\///;
  $songRelPath =~ s/'/''/g;

  my $sql = ''
    . "select * "
    . "from Songs "
    . "where relpath = '$songRelPath' "
    . "  and $libWhere;"
    ;
  my @rows = runSql($db, $sql, '-csv', '-header');
  die "file not found in db: $songRelPath\n" if @rows < 2;
  die "more than one song found, use abs path instead of '$songRelPath'\n"
    if @rows > 2;

  my @headers = cols $rows[0];
  my @data = cols $rows[1];

  if(@headers != @data){
    die "mismatched headers and data\n";
  }
  for(my $i=0; $i<@headers; $i++){
    print $headers[$i] . "=" . $data[$i] . "\n";
  }
}

sub fsize($){
  return (stat $_[0])[7];
}
sub mtime($){
  return (stat $_[0])[9];
}
sub md5sum($){
  open FH, "-|", "md5sum", $_[0];
  my $md5sum = join '', <FH>;
  close FH;
  chomp $md5sum;
  die "Error running $md5sum" if $md5sum !~ /^([a-f0-9]{32})/;
  return $1;
}
sub acoustid($){
  my $file = shift;
  $file =~ s/'/'\\''/g;

  my $acoustid = `acoustid-track-fetch '$file' 2>/dev/null`;
  chomp $acoustid;
  my $re = acoustidRegex();
  if($acoustid =~ /^($re)$/){
    return $1;
  }else{
    return '';
  }
}


sub wrapTokens(@){
  my @tokens;
  for my $token(@_){
    my $t = $token;
    $t =~ s/'/'\\''/g;
    push @tokens, "'$t'";
  }
  return @tokens;
}

sub shellQuiet(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd 2>/dev/null`;
}
sub shell(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd`;
}

sub runSql($$;@){
  my $db = shift;
  my $sql = shift;

  utf8::decode($sql);
  my @tokens;
  push @tokens, 'sqlite3';
  for my $opt(@_){
    push @tokens, $opt;
  }
  push @tokens, $db;
  push @tokens, $sql;

  return shell @tokens;
}
sub runSqlBatch($\@;@){
  my $db = shift;
  my @stmts = @{shift()};
  @stmts = ("BEGIN", @stmts, "END");
  my $sql = join ";\n", @stmts;
  runSql $db, $sql, @_;
}

sub cols($){
  my $csvrow = shift;
  chomp $csvrow;
  my @cols;
  while($csvrow =~ /
    (?:
      "()"
      |
      "(.*?(?<!"))"
      |
      ([^,]+)
    )
    (?:,|$)
  /gsxi){
    my $col;
    $col = $1 if defined $1;
    $col = $2 if defined $2;
    $col = $3 if defined $3;
    $col =~ s/""/"/g;
    push @cols, $col;
  }
  return @cols;
}

sub checkMissing($$){
  my $db = shift;
  my $lib = shift;
  my $libpath = Klomp::Lib::getLibraryPath $lib;

  my @songRelPaths =
    runSql $db, "select relpath from songs where library = '$lib'";
  my $len = @songRelPaths;
  my $piece = 1+$len / 10;
  print "checking $len songs from the db for missing\n";
  my $count = 0;
  my @missing;
  my @deleteSql;
  for my $songRelPath(@songRelPaths){
    chomp $songRelPath;
    if(not -e "$libpath/$songRelPath"){
      print "$songRelPath\n";
      push @missing, $songRelPath;
      $songRelPath =~ s/'/''/g;
      push @deleteSql, ''
          . "delete from Songs "
          . "where relpath = '$songRelPath' "
          . "  and library = '$lib';\n"
          ;
    }
  }
  my $missingCount = scalar @missing;
  print "  finished, $missingCount missing\n";
  if($missingCount > 0){
    print "Remove above missing files from lib? (y/N) ";
    if(<STDIN> =~ /^y$/i){
      my $limit = 30;
      my $lastEnd = -1;
      for(my $i=$limit; $i<@deleteSql; $i+=$limit){
        my ($start, $end) = ($lastEnd+1, $i);
        print "Removing songs $start-$end\n";
        my @toRun = @deleteSql[$start .. $end];
        runSqlBatch $db, @toRun;
        $lastEnd = $i;
      }
      if($lastEnd < $#deleteSql){
        my ($start, $end) = ($lastEnd+1, $#deleteSql);
        print "Removing songs $start-$end\n";
        my @toRun = @deleteSql[$start .. $end];
        runSqlBatch $db, @toRun;
      }
    }
  }
}

sub addSongs($$$$){
  my $db = shift;
  my $lib = shift;
  my $quick = shift;
  my @songRelPaths = @{scalar shift};

  my $metadata = readLibMetadata $db, $lib;

  my $durationCmdExists = cmdExists;
  print STDERR "WARNING: not reading durations\n" if not $durationCmdExists;

  my $songCount = @songRelPaths;
  my $handledCount = 0;
  my $skippedCount = 0;
  print "Adding/updating $songCount songs from the filesystem\n";

  my @jobs;
  share(@jobs);

  my $id=0;
  for my $songChunk(chunks $songsPerJob, @songRelPaths){
    my $job = {};
    my $sql = [];
    my $songs = [];
    share($songs);
    share($job);
    share($sql);

    for my $song(@$songChunk){
      share($song);
      push @$songs, $song;
    }

    $$job{id} = $id;
    $$job{songs} = $songs;
    $$job{status} = 'unstarted';
    $$job{sql} = $sql;
    $$job{skippedCount} = 0;
    $$job{handledCount} = 0;

    $id++;
    push @jobs, $job;
  }

  my @queue = @jobs;
  my @running;
  while(@queue > 0 or @running > 0){
    while(@queue > 0 and (grep{isThreadRunning $_} @running) < $jobCount){
      my $job = shift @queue;
      push @running, $job;
      startThread $job, $lib, $metadata, $quick, $durationCmdExists;
    }

    my $job = shift @running;
    joinThread($job);
    die "error\n" if $$job{status} ne "success";
    $handledCount += $$job{handledCount};
    $skippedCount += $$job{skippedCount};

    if($$job{handledCount} > 0){
      print "  job $$job{id} finished - adding $$job{handledCount}  " .
        "{total: $songCount handled: $handledCount skipped: $skippedCount}\n";
      runSqlBatch $db, @{$$job{sql}};
    }
  }

  print "  handled $handledCount new or modified songs\n";
  print "  skipped $skippedCount unmodified songs {same size and mod date}\n";
}

sub startThread($$$$$){
  my ($job, $lib, $metadata, $quick, $durationCmdExists) = @_;
  if($threaded){
    $threads{$$job{id}} = threads->new( sub {
      handleAddSongJob $job, $lib, $metadata, $quick, $durationCmdExists;
    });
  }else{
    handleAddSongJob $job, $lib, $metadata, $quick, $durationCmdExists;
  }
}

sub joinThread($){
  my $job = shift;
  if($threaded){
    $threads{$$job{id}}->join;
  }
}

sub isThreadRunning($){
  my $job = shift;
  if($threaded){
    return $threads{$$job{id}}->is_running;
  }else{
    return 1;
  }
}

sub handleAddSongJob($$$$$){
  my ($job, $lib, $metadata, $quick, $durationCmdExists) = @_;

  $$job{status} = 'started';
  for my $songRelPath(@{$$job{songs}}){
    my $songRow = getSongRow $lib, $songRelPath, $metadata,
      $quick, $durationCmdExists;
    if(not defined $songRow){
      $$job{skippedCount}++;
      next;
    }

    print "$songRelPath\n";
    push @{$$job{sql}}, getSongDeleteStmt $songRow;
    push @{$$job{sql}}, getSongInsertStmt $songRow;
    $$job{handledCount}++;
  }
  $$job{status} = 'success';
}

sub getSongRow($$$$$){
  my ($lib, $songRelPath, $metadata, $quick, $durationCmdExists) = @_;

  my $libpath = Klomp::Lib::getLibraryPath $lib;
  my $f = "$libpath/$songRelPath";
  die "file not found: $libpath/$songRelPath\n" if not -f $f;

  my $dbExists = defined $$metadata{$songRelPath};

  my ($dbSize, $dbMod, $dbMd5sum, $dbAcoustid);
  if($dbExists){
    $dbSize = $$metadata{$songRelPath}{filesize};
    $dbMod = $$metadata{$songRelPath}{modified};
    $dbMd5sum = $$metadata{$songRelPath}{md5sum};
    $dbAcoustid = $$metadata{$songRelPath}{acoustid};
  }


  if($dbExists and $quick){
    return undef;
  }

  my $filesize = fsize $f;
  my $modified = mtime $f;

  if($dbExists and $dbSize eq $filesize and $dbMod eq $modified){
    return undef;
  }

  my $md5sum = md5sum $f;
  my $acoustid = acoustid $f;

  my $duration;
  if($durationCmdExists){
    $duration = getDuration "$libpath/$songRelPath";
    $duration = formatTimeS $duration if defined $duration;
  }
  $duration = '' if not defined $duration;

  my %tagInfo = Klomp::Tag::readTags "$libpath/$songRelPath";

  my $cols = {};
  for my $col(@tagCols){
    if(defined $tagInfo{$col}){
      $$cols{$col} = $tagInfo{$col};
    }else{
      $$cols{$col} = '';
    }
    $$cols{$col . "_guess"} = Klomp::Tag::guess(
      $col, $songRelPath, $$cols{$col});
  }

  $$cols{library} = $lib;
  $$cols{relpath} = $songRelPath;
  $$cols{filesize} = $filesize;
  $$cols{modified} = $modified;
  $$cols{md5sum} = $md5sum;
  $$cols{acoustid} = $acoustid;
  $$cols{duration} = $duration;

  return $cols;
}

sub getSongInsertStmt($){
  my $cols = shift;

  my @allVals;
  for my $col(@allCols){
    my $val = $$cols{$col};
    chomp $val;
    $val =~ s/'/''/g;
    $val = "'$val'";
    push @allVals, $val;
  }

  return ''
    . " insert into Songs"
    . " (" . join(", ", @allCols) . ")"
    . " values"
    . " (" . join(", ", @allVals) . ")"
    ;
}

sub getSongDeleteStmt($){
  my $cols = shift;

  my $library = $$cols{library};
  my $sqlPath = $$cols{relpath};
  $sqlPath =~ s/'/''/g;
  return "delete from Songs where relpath='$sqlPath' and library='$library'";
}

sub wrapGuessCol($){
  my $col = shift;
  my $colGuess = $col . '_guess';
  return
    "IFNULL(".
      "NULLIF(".
        "$col,".
        "''".
      "),".
      "$colGuess)";
}

sub readLibMetadata($$){
  my ($db, $lib) = @_;
  my @cols = (
    ['filesize', '\d+'],
    ['modified', '\d+'],
    ['md5sum', '[0-9a-f]{32}'],
    ['acoustid', acoustidRegex()],
    ['relpath', '.*'],
  );

  my @colNames = map {$$_[0]} @cols;
  my @colRegex = map {$$_[1]} @cols;

  my $sql = ''
    . " select " . join(", ", @colNames)
    . " from Songs"
    . " where library = '$lib'"
    ;

  my $rowRegex = join ("\\|", map {"($_)"} @colRegex) . "\\n";

  my $metadata = {};
  for my $row(runSql($db, $sql)){
    my @rowData = $row =~ /^$rowRegex$/;
    die "Error reading row: $row\n" if @rowData != @colNames;
    my $relPath = $rowData[-1];
    $$metadata{$relPath} = {};
    for(my $i=0; $i<@colNames; $i++){
      $$metadata{$relPath}{$colNames[$i]} = $rowData[$i];
    }
  }

  return $metadata;
}

sub acoustidRegex(){
  my $hex4 = "[0-9a-f]{4}";
  my $hex8 = "[0-9a-f]{8}";
  my $hex12 = "[0-9a-f]{12}";
  return "(?:$hex8-$hex4-$hex4-$hex4-$hex12)?";
}

sub chunks($@){
  my ($size, @arr) = @_;
  my @rem = (@arr);
  my @chunks;
  push @chunks, [splice(@rem, 0, $size)] while @rem;
  return @chunks;
}

&main(@ARGV);
