#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);
use lib "/opt/klomp/lib";
use Klomp::Config;
use Klomp::Files;
use Klomp::Lib;

my $USE_MPLAYER = 1;

my $updateCurCmdIntervalMillis = 20 * 1000;
my $updateCurCmdNextRunMillis = undef;

my $FIFO = Klomp::Files::klompFile("fifo");
my $PID_FILE = Klomp::Files::klompFile("pidfile");
my $KLOMPCUR = Klomp::Files::klompFile("cur");

my $klompCmdExec = 'klomp-cmd';

sub readKlompCur();
sub updateKlompCur($$$$);
sub nowMillis();

sub main(@){
  die "Usage: $0\n" if @_ > 0;

  my $MPLAYER_EXEC = `which mplayer`;
  chomp $MPLAYER_EXEC;
  if($MPLAYER_EXEC !~ /mplayer/){
    $MPLAYER_EXEC = undef;
  }

  my $cur = readKlompCur;

  my $updateCurCmd = Klomp::Config::getProperty "updateCurCmd";

  my $songAbsPath = Klomp::Lib::getSongAbsPath $$cur{lib}, $$cur{relpath};
  if(not defined $songAbsPath){
    die "Couldnt find song $$cur{relpath} in lib $$cur{lib}\n";
  }elsif(not -f $songAbsPath){
    die "Song $songAbsPath not found on the filesystem\n";
  }

  if(-e $PID_FILE){
    my $pid = `cat $PID_FILE 2>/dev/null`;
    chomp $pid;
    system "kill -9 $pid 2>/dev/null";
    system "rm $PID_FILE";
  }

  system "rm", "-f", $FIFO;

  if($USE_MPLAYER){
    system "mkfifo", $FIFO;
    fork or exec "klomp-fifo-writer";
  }

  my $pid;
  if($USE_MPLAYER){
    $pid = open FH, '-|',
      $MPLAYER_EXEC,
      '-vo', 'BUGGYBUGBUGBUG',
      '-quiet',
      '-input', "file=$FIFO",
      '-ss', $$cur{pos},
      $songAbsPath;
  }else{
    my $curPosMillis = int($$cur{pos} * 1000.0 + 0.5);
    $pid = open FH, '-|', 'qtcmdplayer', $songAbsPath, $curPosMillis
      or die "could not run qtcmdplayer\n$!\n";
  }

  system "echo $pid > $PID_FILE";

  if($USE_MPLAYER){
    system "echo pause > $FIFO" if $$cur{paused};
  }

  if($USE_MPLAYER){
    my $line = '';
    while($line !~ /^Starting playback\.\.\./){
      $line = <FH>;
      die "Error starting mplayer\n" if not defined $line;
    }
  }

  my $startMillis = nowMillis();

  my $sexPos = $$cur{pos};
  my $paused = 0;

  while(1){
    if(not -e $PID_FILE){
      die "missing pidfile\n";
    }else{
      my $newPid = `cat $PID_FILE`;
      chomp $newPid;
      if($newPid ne $pid){
        die "new $0 is running\n";
      }
    }

    if($USE_MPLAYER){
      if(not -p $FIFO){
        die "fifo $FIFO is broken\n";
      }
    }

    my $line = <FH>;
    if(not defined $line){
      die "i guess its dead...\n";
    }

    if($USE_MPLAYER){
      if($line =~ /^Exiting... \(End of file\)/){
        exec "$klompCmdExec next";
      }elsif($line =~ /^ANS_TIME_POSITION=([0-9\.\-]+)/){
        $sexPos = $1;
        updateKlompCur $cur, $sexPos, $paused, $updateCurCmd;
      }elsif($line =~ /^ANS_pause=(yes|no)$/){
        my $ansPause = $1;
        $paused = $ansPause =~ /yes/ ? 1 : 0;
        updateKlompCur $cur, $sexPos, $paused, $updateCurCmd;
      }
    }else{
      if($line =~ /^END$/){
        exec $klompCmdExec, "next";
      }elsif($line =~ /^pos: (\d+)$/){
        my $posMillis = $1;

        my $updatePos = 1;
        my $sexPosMillis = int($sexPos * 1000.0 + 0.5);
        if($posMillis < $sexPosMillis){
          my $elapsedMillis = nowMillis() - $startMillis;
          if($elapsedMillis < 2000){
            #ignore invalid position for the first 2s of playback
            $updatePos = 0;
          }
        }

        if($updatePos){
          $sexPos = $1 / 1000.0;
          updateKlompCur $cur, $sexPos, $paused, $updateCurCmd;
        }
      }
    }
  }
}

sub readKlompCur(){
  die "$KLOMPCUR does not exist\n" if not -f $KLOMPCUR;
  open CURFILE, "< $KLOMPCUR" or die "Could not read $KLOMPCUR\n";
  my $contents = join '', <CURFILE>;
  close CURFILE;

  if($contents !~ /^([0-9\.\-]+) ([0-9\.]+) (paused )?([^@]*)@(.*)/){
    die "$KLOMPCUR is malformed:\n$contents\n";
  }
  my ($pos, $len, $paused, $lib, $relpath) = ($1, $2, $3, $4, $5);
  return {
    pos      => $pos,
    len      => $len,
    paused   => (defined $paused and $paused =~ /paused/ ? 1 : 0),
    lib      => $lib,
    relpath  => $relpath,
    contents => $contents,
  };
}

sub updateKlompCur($$$$){
  my ($cur, $pos, $paused, $updateCurCmd) = @_;
  my $pausedDisplay = $paused ? "paused " : "";

  if($$cur{pos} eq $pos and $$cur{paused} eq $paused){
    return;
  }

  my $newCur = readKlompCur;
  if($$cur{lib} ne $$newCur{lib} or $$cur{relpath} ne $$newCur{relpath}){
    die "song has changed out from underneath $0\n";
  }

  my $contents = $$cur{contents};

  $pos = 0 if $pos < 0;
  $pos = sprintf "%.2f", $pos;


  my $new = "$pos $$newCur{len} $pausedDisplay$$newCur{lib}\@$$newCur{relpath}";
  if($contents !~ s/^([0-9\.\-]+) ([0-9\.]+) (paused )?([^@]*)\@(.*)/$new/){
    die "$KLOMPCUR is malformed:\n$contents\n";
  }

  open CURFILE, "> $KLOMPCUR" or die "Could not write $KLOMPCUR\n";
  print CURFILE $contents;
  close CURFILE;

  $$cur{pos} = $pos;
  $$cur{paused} = $paused;
  $$cur{contents} = $contents;

  if(defined $updateCurCmd){
    my $nowMillis = nowMillis();
    if(not defined $updateCurCmdNextRunMillis){
      $updateCurCmdNextRunMillis = $nowMillis + $updateCurCmdIntervalMillis;
    }elsif($nowMillis > $updateCurCmdNextRunMillis){
      system "$updateCurCmd >/dev/null 2>/dev/null &";
      $updateCurCmdNextRunMillis = $nowMillis + $updateCurCmdIntervalMillis;
    }
  }
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
