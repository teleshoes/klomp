#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Config;
use Klomp::Files;
use File::Basename qw(basename dirname);

my $KLOMP_CMD_EXEC = "klomp-cmd";
my $FILES = Klomp::Files::allKlompFiles();
my $REL_FILES = Klomp::Files::allBaseDirRelativeKlompFiles();

my $EXEC = basename $0;
my $EXEC_FULL_PATH = $0;

my @PL_FILES = ($$REL_FILES{cur}, $$REL_FILES{list}, $$REL_FILES{history});

my @SPECIAL_PLNAMES = qw(main);

my $usage = "Usage:
  Read/write klomp playlist name PLNAME from/to \"$$FILES{plname}\",
  and move PLAYLIST_FILES: \"@PL_FILES\"
    between BASE_DIR:      \"$$FILES{baseDir}/\"
    and PL_BAK_DIR:        \"$$FILES{pldir}<PLNAME>/\"

  $EXEC -h
    show this message

  $EXEC
    same as: `$EXEC --show`

  $EXEC PLNAME
    same as: `$EXEC --set PLNAME`

  $EXEC -g|--get
    -read active playlist name PLNAME from $$FILES{plname}
    -FAIL if $$FILES{plname} is empty or not present
    -print PLNAME

  $EXEC -l|--list
    -collect all playlist names into PLNAME_LIST
      -include active playlist name and deactivated playlist names
    -split PLNAME_LIST into two lists:
      -collect entries that match \"@SPECIAL_PLNAMES\" into SPECIAL_PLNAME_LIST
      -collect the rest into REGULAR_PLNAME_LIST
    -gather playlist names into SORTED_PLNAME_LIST
      -first, append SPECIAL_PLNAME_LIST, sorted asciibetically
      -then, append REGULAR_PLNAME_LIST, sorted asciibetically
    -print SORTED_PLNAME_LIST, one per line (if any)

    e.g.: $EXEC --list
      " . join("\n      ", sort @SPECIAL_PLNAMES). "
      books
      instrumental
      party

  $EXEC --show
    -collect playlists into SORTED_PLNAME_LIST, as in `$EXEC --list`
    -get current playlist name PLNAME, if any, as in `$EXEC --get`
    -if there is no PLNAME, or PLNAME is not in SORTED_PLNAME_LIST:
      -print \"<NO ACTIVE PLAYLIST>\"
    -otherwise:
      -if the first item on SORTED_PLNAME_LIST is not PLNAME:
        -move the first item to the end of SORTED_PLNAME_LIST
        -repeat, until the first item on SORTED_PLNAME_LIST is PLNAME
      -print SORTED_PLNAME_LIST, one per line, with ' (*)' after PLNAME

  $EXEC -s|--set PLNAME
    -deactivate current playlist, and activate PLNAME. roughly the same as:
      -run: `$EXEC --deactivate`
      -run: `$EXEC --activate PLNAME`

    e.g.: `$EXEC --set main`
          with $$FILES{plname} containing \"books\" (OLD_PLNAME=books)
      $KLOMP_CMD_EXEC --stop
      mkdir $$FILES{pldir}books
      mv $$FILES{baseDir}/{" . join("|", @PL_FILES) . "} $$FILES{pldir}books/
      mv $$FILES{pldir}main/{" . join("|", @PL_FILES) . "} $$FILES{baseDir}/
      echo main > $$FILES{plname}
      rmdir $$FILES{pldir}main/

  $EXEC -c|--cycle|-t|--toggle
    -get the next playlist name NEXT_PLNAME
      -list all playlist names, ordered the same as in `$EXEC --list`
      -find active playlist name PLNAME on the list of playlist names
      -if PLNAME is the only item on the list, use PLNAME for NEXT_PLNAME
      -if PLNAME is the last item on the list, use the first item for NEXT_PLNAME
      -otherwise, use the item after PLNAME for NEXT_PLNAME
    -run: `$EXEC --set NEXT_PLNAME`

  $EXEC --activate|--restore|--insert PLNAME
    -run: `$KLOMP_CMD_EXEC stop`
    -FAIL if ANY playlist is active (must call --deactivate first, or use --set)
      -FAIL if \"$$FILES{plname}\" exists
    -FAIL if PLNAME does not contain only letters, numbers, and underscores
    -FAIL if BASE_DIR \"$$FILES{baseDir}\" contains any PL_FILES \"@PL_FILES\"
    -move PL_FILES from PL_BAK_DIR \"$$FILES{pldir}PLNAME\" to BASE_DIR
      -if PL_BAK_DIR does not exist, PL_FILES will be missing
    -write PLNAME to \"$$FILES{plname}\"
    -rmdir PL_BAK_DIR (if it exists)

    e.g.: `$EXEC --activate books`
          with $$FILES{plname} missing (failure otherwise)
      $KLOMP_CMD_EXEC --stop
      mv $$FILES{pldir}books/{" . join("|", @PL_FILES) . "} $$FILES{baseDir}/
      echo books > $$FILES{plname}
      rmdir $$FILES{pldir}books/

  $EXEC --deactivate|--backup|--remove
    -run: `$KLOMP_CMD_EXEC stop`
    -FAIL if there is NO playlist active
      -FAIL if $$FILES{plname} does not exist or is empty
    -get the active playlist name PLNAME as in `$EXEC --get`
    -create backup directory PL_BAK_DIR \"$$FILES{pldir}PLNAME/\"
      -FAIL if PL_BAK_DIR already exists, and is not empty (or not removable)
    -find playlist files \"@PL_FILES\" in BASE_DIR \"$$FILES{baseDir}\"
    -move playlist files from base dir to PL_BAK_DIR
    -remove $$FILES{plname} if present

    e.g.: `$EXEC --deactivate`
          with $$FILES{plname} missing (CUR_PLNAME=main)
      $KLOMP_CMD_EXEC --stop
      mkdir $$FILES{pldir}main
      mv $$FILES{baseDir}/{" . join("|", @PL_FILES) . "} $$FILES{pldir}main/
";

sub activatePlaylist($);
sub deactivatePlaylist();

sub checkPlaylistName($);
sub getActivePlaylistName();
sub setActivePlaylistName($);

sub getDeactivatedPlaylistNames();
sub getAllPlaylistNames();
sub sortPlaylistNamesSpecialFirst(@);
sub prettyFormatPlaylistNames($@);
sub getNextPlaylistName();

sub moveFile($$);
sub readFile($);
sub writeFile($$);
sub maybePropCmd($);

sub main(@){
  my $targetUser = Klomp::Config::getProperty "targetUser";
  if(defined $targetUser and "$targetUser\n" ne `whoami`){
    print "rerunning as $targetUser\n";
    exec "sudo su -c '$EXEC_FULL_PATH @ARGV' $targetUser";
  }

  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ == 0){
    exec $EXEC_FULL_PATH, "--show";
  }elsif(@_ == 1 and $_[0] =~ /^\w+$/){
    exec $EXEC_FULL_PATH, "--set", $_[0];
  }elsif(@_ == 0 or (@_ == 1 and $_[0] =~ /^(-g|--get)$/)){
    my $plname = getActivePlaylistName();
    if(not defined $plname){
      die "ERROR: no active playlist\n";
    }
    print "$plname\n";
  }elsif($_[0] =~ /^(-l|--list)$/){
    my @allPlaylistNames = getAllPlaylistNames();
    @allPlaylistNames = sortPlaylistNamesSpecialFirst(@allPlaylistNames);
    print "$_\n" foreach @allPlaylistNames;
  }elsif($_[0] =~ /^(--show)$/){
    my @allPlaylistNames = getAllPlaylistNames();
    @allPlaylistNames = sortPlaylistNamesSpecialFirst(@allPlaylistNames);
    my $activePlname = getActivePlaylistName();
    print prettyFormatPlaylistNames($activePlname, @allPlaylistNames);
  }elsif(@_ == 2 and $_[0] =~ /^(-s|--set)$/){
    my $plname = $_[1];
    system $KLOMP_CMD_EXEC, "stop";
    deactivatePlaylist;
    activatePlaylist $plname;
  }elsif(@_ == 1 and $_[0] =~ /^(-c|--cycle|-t|toggle)$/){
    my $plname = getActivePlaylistName();
    $plname = "<none>" if not defined $plname;
    my $nextPlname = getNextPlaylistName();
    $nextPlname = "<none>" if not defined $plname;
    print "$plname => $nextPlname\n";
    exec $EXEC_FULL_PATH, "--set", $nextPlname;
  }elsif(@_ == 2 and $_[0] =~ /^(--activate|--restore|--insert)$/){
    my $plname = $_[1];
    system $KLOMP_CMD_EXEC, "stop";
    activatePlaylist $plname;
  }elsif(@_ == 1 and $_[0] =~ /^(--deactivate|--backup|--remove)$/){
    system $KLOMP_CMD_EXEC, "stop";
    deactivatePlaylist;
  }else{
    die $usage;
  }
}

sub activatePlaylist($){
  my ($plname) = @_;
  checkPlaylistName $plname;

  for my $file($$FILES{plname}, $$FILES{cur}, $$FILES{list}, $$FILES{history}){
    die "ERROR: cannot activate plname=$plname, $file exists\n" if -e $file;
  }

  my $plBakDir = "$$FILES{pldir}$plname";
  for my $plfile(@PL_FILES){
    my $srcFile = "$plBakDir/$plfile";
    my $destFile = "$$FILES{baseDir}/$plfile";
    moveFile $srcFile, $destFile if -e $srcFile;
  }

  setActivePlaylistName $plname;

  system "rmdir", $plBakDir if -d $plBakDir;

  if(-e $plBakDir){
    die "ERROR: $plBakDir still exists after activating $plname\n";
  }

  maybePropCmd("playlistCmd");
}

sub deactivatePlaylist(){
  my $plname = getActivePlaylistName();
  if(not defined $plname){
    die "ERROR: cannot deactivate playlist, no playlist is active\n";
  }

  my $plBakDir = "$$FILES{pldir}$plname";

  system "rmdir", $plBakDir if -d $plBakDir;
  if(-e $plBakDir){
    die "ERROR: cannot deactivate playlist, backup dir \"$plBakDir\" exists\n";
  }

  system "mkdir", $plBakDir;
  if(not -e $plBakDir){
    die "ERROR: cannot create backup dir \"$plBakDir\"\n";
  }

  for my $plfile(@PL_FILES){
    my $srcFile = "$$FILES{baseDir}/$plfile";
    my $destFile = "$plBakDir/$plfile";
    moveFile $srcFile, $destFile if -e $srcFile;
  }

  system "rm", $$FILES{plname};

  if(-e $$FILES{plname}){
    die "ERROR: $$FILES{plname} still exists after deactivating\n";
  }
}

sub checkPlaylistName($){
  my ($plname) = @_;
  die "ERROR: invalid playlist name \"$plname\"\n" if $plname !~ /^\w+\z$/;
}

sub getActivePlaylistName(){
  if(not -e $$FILES{plname}){
    return undef;
  }else{
    my $plname = readFile $$FILES{plname};
    chomp $plname;
    if($plname =~ /^\s*$/){
      return undef;
    }
    checkPlaylistName $plname;
    return $plname;
  }
}
sub setActivePlaylistName($){
  my ($plname) = @_;
  checkPlaylistName $plname;

  writeFile $$FILES{plname}, "$plname\n";

  if($plname ne getActivePlaylistName()){
    die "ERROR: playlist name mismatch after setting plname=$plname\n";
  }
}

sub getDeactivatedPlaylistNames(){
  my @dirs = glob "$$FILES{pldir}*/";
  my @plnames;
  for my $dir(@dirs){
    if($dir =~ /^$$FILES{pldir}(\w+)\/$/){
      push @plnames, $1;
    }
  }
  return @plnames;
}

sub getAllPlaylistNames(){
  my $activePlname = getActivePlaylistName();
  my @deactivatedPlaylistNames = getDeactivatedPlaylistNames();

  my @plnames;
  push @plnames, $activePlname if defined $activePlname;
  @plnames = (@plnames, @deactivatedPlaylistNames);
  return @plnames;
}

sub sortPlaylistNamesSpecialFirst(@){
  my @plnames = @_;

  my $specialPlnamesRegex = join "|", @SPECIAL_PLNAMES;
  my @plnamesSpecial = grep {$_ =~ /^($specialPlnamesRegex)$/} @plnames;
  my @plnamesRegular = grep {$_ !~ /^($specialPlnamesRegex)$/} @plnames;

  return (sort(@plnamesSpecial), sort(@plnamesRegular));
}

sub prettyFormatPlaylistNames($@){
  my ($activePlname, @allPlaylistNames) = @_;

  my %okPlaylistNames = map {$_ => 1} @allPlaylistNames;
  if(not defined $activePlname or not $okPlaylistNames{$activePlname}){
    return "<NO ACTIVE PLAYLIST>\n";
  }

  my $prefix = "";
  my $suffix = "";
  my $found = 0;
  for my $plname(@allPlaylistNames){
    if($plname eq $activePlname){
      $prefix .= "$plname (*)\n";
      $found =1;
    }elsif($found){
      $prefix .= "$plname\n";
    }else{
      $suffix .= "$plname\n";
    }
  }

  return "$prefix$suffix";
}

sub getNextPlaylistName(){
  my @allPlaylistNames = getAllPlaylistNames();
  @allPlaylistNames = sortPlaylistNamesSpecialFirst(@allPlaylistNames);

  die "ERROR: no playlist names found\n" if @allPlaylistNames == 0;

  my $activePlname = getActivePlaylistName();

  for(my $i=0; $i<@allPlaylistNames; $i++){
    if(defined $activePlname and $activePlname eq $allPlaylistNames[$i]){
      my $nextIdx = $i + 1;
      if($nextIdx < @allPlaylistNames){
        return $allPlaylistNames[$nextIdx];
      }
    }
  }

  return $allPlaylistNames[0];
}

sub moveFile($$){
  my ($src, $dest) = @_;
  my @mvCmd = ("mv", "--no-clobber", $src, $dest);
  my $destDir = dirname $dest;
  my $moveFileFctCall = "moveFile(\"$src\", \"$dest\")";

  if($dest =~ /\/$/ or -d $dest){
    die "ERROR: $moveFileFctCall failed, $dest is a directory\n";
  }elsif(not -d $destDir){
    die "ERROR: $moveFileFctCall failed, no dest parent dir \"$destDir\"\n";
  }elsif(-e $dest){
    die "ERROR: $moveFileFctCall failed, $dest already exists\n";
  }elsif(not -e $src){
    die "ERROR: $moveFileFctCall failed, $src does not exist\n";
  }

  system "mv", "--no-clobber", $src, $dest;
  my $exitCode = $?;

  if(not -e $dest){
    die "ERROR: \"@mvCmd\" failed, $dest does not exist immediately after\n";
  }elsif(-e $src){
    die "ERROR: \"@mvCmd\" failed, $src still exists immediately after\n";
  }elsif($exitCode != 0){
    die "ERROR: \"@mvCmd\" failed, with exit code $exitCode\n";
  }
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not write to $file\n$!\n";
  my $contents = join '', <FH>;
  close FH;
  return $contents;
}
sub writeFile($$){
  my ($file, $contents) = @_;
  open FH, "> $file" or die "ERROR: could not write to $file\n$!\n";
  print FH $contents;
  close FH;
}

sub maybePropCmd($){
  my $prop = shift;
  my $cmd = Klomp::Config::getProperty $prop;
  if(defined $cmd){
    print "running '$cmd'\n";
    $cmd =~ s/'/'\\''/g;
    system "bash -c '$cmd' >/dev/null 2>/dev/null &";
  }
}

&main(@ARGV);
