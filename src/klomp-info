#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Files;
use Klomp::Lib;

my $KLOMP_CUR = Klomp::Files::klompFile("cur");
my $KLOMP_HIST = Klomp::Files::klompFile("hist");
my $KLOMP_LIST = Klomp::Files::klompFile("list");

my @attColNames = qw(title artist album number);
my @calcColNames = qw(pos len percent index running paused playlist ended count runcmds);
my @extraColNames = qw(file);
my %colSynonyms = (
  "position" => "pos",
  "dur"      => "len",
  "duration" => "len",
  "length"   => "len",
  "pause"    => "paused",
  "pl"       => "playlist",
  "cmd"      => "runcmds",
);
my $colSynFmt = join '', map {
  sprintf "\n        %-10s => %s", $_, $colSynonyms{$_}
} sort keys %colSynonyms;

my @allColNames = (@attColNames, @calcColNames, @extraColNames);
my @defaultColNames = (@attColNames, @calcColNames);
my $validAttColNames = join "|", @attColNames;
my $validColNames = join "|", @allColNames;
my $validColSyns = join "|", sort(keys %colSynonyms);

my $usage = "Usage:
  $0 [OPTS] [COL COL COL ..] [INDEX INDEX INDEX ..]
    print values for COLs, separated by spaces
    if no COL is given, all are used except for \"@extraColNames\"
      i.e.: \"@defaultColNames\"
    each INDEX is printed one per line. values are read from:
      $KLOMP_CUR {INDEX=0}
      $KLOMP_HIST {INDEX<0}
      $KLOMP_LIST {INDEX>0}
    if no INDEX is given, \"0\" is used

  COL:
    [$validColNames]
      playlist: \"PLAYLIST_NAME\" unless playlist is main
      ended:    \"ended\" if klomp cur file is missing
      count:    number of songs in current playlist, not counting the current song
      pos:      current position in M:SS or H:MM:SS {or S.ss if -s}
      len:      length in M:SS or H:MM:SS {or S.ss if -s}
      percent:  integer between 0 and 100 for pos/len
      index:    position in playlist (0 for current, 1 for next, -1 for previous)
      running:  'running' if pid in pidfile is mplayer/qtcmdplayer, otherwise ''
      paused:   'paused' if klomp cur file has paused, otherwise ''
      runcmds:  \"{CMD}\" if playlist contains any \"!SHELL_CMD\" lines
      file:     the absolute path to the song file

      non-empty values for playlist, ended, and percent
      are wrapped in |s unless CSV output is on
      e.g.: \"|ended|\"

      synonyms:$colSynFmt

  INDEX:
      0     current song in klompcur, or next song if there is no current song
      N     line number in playlist {1 is the next song to be played}
      +N    line number in playlist {+1 is the next song to be played}
      -N    line number in history {-1 is the song that finished most recently}
      X..Y  use all indices between X and Y  {X<=Y}
      X-Y   use all indices between X and Y  {X<=Y}
      [X,Y] use all indices between X and Y  {X<=Y}
        e.g.:
          the next song:                       1
          the current song:                    0
          the most recently played song:       -1
          the current song and the next song:  0..1    or  [0,1]    or  0-1
          the two most recently played songs:  -2..-1  or  [-2,-1]  or  -2--1

      song information is printed, one per line, for each indicated index
      if no INDEXes are given, '0' is used

  OPTS:
    -i  ignore any INDEXes that do not exist instead of printing 'No song info found'
    -n  do not output any newlines, neither between songs nor at the end
    -c  output as CSV
    -h  output a csv header showing the column names first
    -s  output times in fractional seconds instead of M:SS or H:MM:SS
    --format=FORMAT
      runs `printf FORMAT VAL VAL ...` where VAL is the value of each COL given
      cannot give -c and --format
      e.g.:  > $0 --format=\"%s / %s\\n%s\" pos len title
             0:26 / 10:13
             Rinse The Raindrops
";

sub parseInfo($$$$$$$$);
sub readKlompInfo($$);
sub readSongLines($$);
sub selectKlompInfo($$$$);
sub formatHMS($);
sub formatSep($$);
sub parseIndex($);
sub parseIndexRange($$);
sub fileLineCount($);

sub main(@){
  my (@cols, @indices);
  my $ignoreMissingIndexes = 0;
  my $newline = 1;
  my $csv = 0;
  my $header = 0;
  my $seconds = 0;
  my $format;
  my $indexRE = '[+\-]?\d+';
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-i)$/){
      $ignoreMissingIndexes = 1;
    }elsif($arg =~ /^(-n)$/){
      $newline = 0;
    }elsif($arg =~ /^(-c)$/){
      $csv = 1;
    }elsif($arg =~ /^(-h)$/){
      $header = 1;
    }elsif($arg =~ /^(-s)$/){
      $seconds = 1;
    }elsif($arg =~ /^--format=(.*)$/){
      $format = $1;
    }elsif($arg =~ /^($validColNames|$validColSyns)$/){
      my $col = defined $colSynonyms{$arg} ? $colSynonyms{$arg} : $arg;
      push @cols, $col;
    }elsif($arg =~ /^($indexRE)$/){
      push @indices, parseIndex($1);
    }elsif($arg =~ /^($indexRE)\.\.($indexRE)$/){
      @indices = (@indices, parseIndexRange($1, $2));
    }elsif($arg =~ /^($indexRE)-($indexRE)$/){
      @indices = (@indices, parseIndexRange($1, $2));
    }elsif($arg =~ /^\[($indexRE),($indexRE)\]$/){
      @indices = (@indices, parseIndexRange($1, $2));
    }else{
      die "$usage\ninvalid arg: $arg\n";
    }
  }
  die $usage if $csv and defined $format;

  @cols = @defaultColNames if @cols == 0;

  @indices = (0) if @indices == 0;
  my $max = 0;
  my $min = 0;
  for my $index(@indices){
    $max = $index if $index > $max;
    $min = $index if $index < $min;
  }
  $max = 0 if $max<0;

  print join(",", @cols) . "\n" if $header;

  my ($curInfo, $histInfo, $listInfo) = readKlompInfo $min, $max;

  my $playlist = grep(/playlist/, @cols) ? `klomp-playlist --get` : "";
  chomp $playlist;

  my $count = fileLineCount($KLOMP_LIST);

  for my $index(@indices){
    my $klompInfo = selectKlompInfo $index, $curInfo, $histInfo, $listInfo;
    if(defined $klompInfo){
      my $info = parseInfo $klompInfo, $index, $playlist, $count, \@cols, $csv, $seconds, $format;
      print $info;
      print "\n" if $newline;
    }else{
      if(not $ignoreMissingIndexes){
        print "No song info found (#$index)";
        print "\n" if $newline;
      }
    }
  }
}

sub parseInfo($$$$$$$$){
  my ($klompInfo, $index, $playlist, $count, $cols, $csv, $seconds, $format) = @_;
  my %info;
  my $okLibs = join "|", Klomp::Lib::getAllLibNames();
  for my $line(split /\n/, $klompInfo){
    if($line =~ /^(\d+\.\d+)?\s*(\d+\.\d+)?\s*(paused\s*)?\s*($okLibs)@(.*)/){
      %info = (%info,
        pos     => $1,
        len     => $2,
        paused  => $3,
        lib     => $4,
        relpath => $5,
      );
    }elsif($line =~ /^($validAttColNames|duration)=(.*)/){
      $info{$1} = $2;
    }
  }

  my @info;
  for my $col(@$cols){
    if($col eq 'playlist'){
      my $pl = $playlist eq 'main' ? "" : formatSep $playlist, $csv;
      push @info, $pl;
    }elsif($col eq 'ended'){
      my $ended = -e $KLOMP_CUR ? "" : formatSep "ended", $csv;
      push @info, $ended;
    }elsif($col eq 'count'){
      push @info, $count;
    }elsif($col =~ /^(pos|len|percent)$/){
      my $pos;
      $pos = $info{pos} if not defined $pos or $pos == 0;
      $pos = 0 if not defined $pos or $pos == 0;

      my $len;
      $len = $info{duration} if not defined $len or $len == 0;
      $len = $info{len} if not defined $len or $len == 0;
      $len = 0 if not defined $len or $len == 0;

      my $percent = 0;
      $percent = $pos/$len*100 if $len > 0;
      $percent = sprintf "%.0f", $percent;
      push @info, ($seconds ? $pos : formatHMS $pos) if $col eq 'pos';
      push @info, ($seconds ? $len : formatHMS $len) if $col eq 'len';
      push @info, formatSep "$percent", $csv if $col eq 'percent';
    }elsif($col =~ /^(index)$/){
      push @info, $index;
    }elsif($col =~ /^(running)$/){
      my $isRunning = 0;
      my $pidfile = Klomp::Files::klompFile("pidfile");
      if(-f $pidfile){
        my $pid = `cat $pidfile`;
        chomp $pid;
        if($pid =~ /^\d+$/){
          my $proc = `ps -p $pid -o comm --no-headers`;
          chomp $proc;
          if($proc =~ /^(mplayer|qtcmdplayer)$/){
            $isRunning = 1;
          }
        }
      }
      push @info, $isRunning ? "running" :"";
    }elsif($col =~ /^(paused)$/){
      push @info, defined $info{paused} ? $info{paused} : "";
    }elsif($col eq 'runcmds'){
      my $count = `grep "^!" "$KLOMP_LIST" | wc -l`;
      push @info, $count > 0 ? "{CMD}" : "";
    }elsif($col eq 'file'){
      push @info, Klomp::Lib::getSongAbsPath $info{lib}, $info{relpath};
    }elsif($col =~ /^($validAttColNames)$/){
      my $att = $info{$col};
      $att = "" if not defined $att;
      push @info, $att;
    }else{
      die $usage;
    }
  }

  if($csv){
    my @csvInfo;
    for my $s(@info){
      if($s =~ /[",\r\n]/){
        $s =~ s/"/""/g;
        $s = "\"$s\"";
      }
      push @csvInfo, $s;
    }
    return join ',', @csvInfo;
  }elsif(defined $format){
    open FH, "-|", "printf", $format, @info;
    my @lines = <FH>;
    close FH;
    return join '', @lines;
  }else{
    return join " ", grep {defined $_ and length $_ > 0} @info;
  }
}

sub readKlompInfo($$){
  my ($min, $max) = @_;

  my $curInfo = undef;
  my $histInfo = [];
  my $listInfo = [];

  $curInfo = `cat $KLOMP_CUR` if -e $KLOMP_CUR;
  if((not defined $curInfo or $min < 0) and -f $KLOMP_HIST){
    $min = 0-$min;
    $min = 1 if $min == 0;
    $histInfo = [readSongLines($min, $KLOMP_HIST)];
  }
  if((not defined $curInfo or $max > 0) and -e $KLOMP_LIST){
    $max = 1 if $max == 0;
    $listInfo = [readSongLines($max, $KLOMP_LIST)];
  }

  return ($curInfo, $histInfo, $listInfo);
}

sub readSongLines($$){
  my ($numLines, $listFile) = @_;
  my @lines;
  open FH, "<", $listFile or die "could not read $listFile\n$!\n";
  my $line;
  while(@lines < $numLines and $line = <FH>){
    next if $line =~ /^!/;
    $line =~ s/\/\/\/\\\\\\/\n/g;
    push @lines, $line;
  }
  close FH;
  return @lines;
}

sub selectKlompInfo($$$$){
  my ($index, $curInfo, $histInfo, $listInfo) = @_;
  if($index == 0){
    if(defined $curInfo){
      return $curInfo;
    }elsif(@$listInfo > 0){
      return $$listInfo[0];
    }else{
      return undef;
    }
  }elsif($index > 0){
    my $listIndex = $index - 1;
    if($listIndex < @$listInfo){
      return $$listInfo[$listIndex];
    }else{
      return undef;
    }
  }elsif($index < 0){
    my $histIndex = (0 - $index) - 1;
    if($histIndex < @$histInfo){
      return $$histInfo[$histIndex];
    }else{
      return undef;
    }
  }
}

sub formatHMS($){
  my $time = shift;
  $time = int(0.5 + $time);
  my $h = int($time / (60*60));
  my $m = int($time % (60*60) / (60));
  my $s = $time - ($m*60) - ($h*60*60);
  $s = "0$s" if $s < 10;

  if($h == 0){
    return "$m:$s";
  }else{
    $m = "0$m" if $m < 10;
    return "$h:$m:$s";
  }
}

sub formatSep($$){
  my ($s, $csv) = @_;
  return $csv ? $s : "|$s|";
}

sub parseIndex($){
  my ($indexArg) = @_;
  if($indexArg =~ /^\+?(\d+)$/){
    return 0 + $1;
  }elsif($indexArg =~ /^-(\d+)$/){
    return 0 - $1;
  }else{
    die "invalid index: $indexArg\n";
  }
}

sub parseIndexRange($$){
  my ($lowerArg, $upperArg) = @_;
  my $lower = parseIndex $lowerArg;
  my $upper = parseIndex $upperArg;
  die "invalid index range: $lower - $upper\n" if $lower > $upper;

  return ($lower .. $upper);
}

sub fileLineCount($){
  my $count = 0;
  my $out = `wc -l '$_[0]' 2>/dev/null`;
  chomp $out;
  if($out =~ /^(\d+)\s(.+)$/){
    return $1;
  }else{
    return 0;
  }
}

&main(@ARGV);
