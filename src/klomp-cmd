#!/usr/bin/perl
use strict;
use warnings;
use Sys::Hostname;

my $usage = "Usage:
  $0 playlist NAME - toggle between playlist NAME and the main playlist
     .klompcur and .klomplist are moved between three dirs
       HOME
       MAIN {\"HOME/.klomplist-main/\"}
       NAME {\"HOME/.klomplist-NAME/\"}
     if neither NAME nor MAIN exist:
       HOME => MAIN
     if NAME exists and MAIN does not:
       HOME => MAIN
       NAME => HOME
     if main exists and HOME does not:
       HOME => NAME
       MAIN => HOME
  $0 start - start
  $0 stop  - stop
  $0 pause - play/pause
  $0 next  - skip song
  $0 prev  - previous song
  $0 reset - clear song list and history
  $0 -h    - show this message
  $0 <mplayer slave input command>
     see: mplayer -input cmdlist
     for complete command list
     {e.g.: $0 seek 10}
";

sub isPhone();
sub defaultPlaylist();
sub start();
sub stop();
sub isRunning();
sub shellQuiet(@);
sub nextItem();
sub prevItem();
sub addCurTimestamp($);
sub removeCurTimestamp($);
sub backupPlaylist($);
sub restorePlaylist($);

if(isPhone and `whoami` =~ /^root(\n|$)/){
  print "you are root. rerunning as user\n";
  exec "su -c '$0 @ARGV' user";
}

my $klomplayerExec = 'klomplayer';
my $KLOMPCUR = `echo -n \$HOME/.klompcur`;
my $KLOMPLIST = `echo -n \$HOME/.klomplist`;
my $KLOMPHIST = `echo -n \$HOME/.klomphistory`;
my $FIFO = '/tmp/klomplayer_fifo';
my $PID_FILE = '/tmp/klomplayer_pid';

sub main(@){
  my $cmd = shift() || '';
  if($cmd eq '-h'){
    print $usage;
    exit 0;
  }elsif($cmd eq 'playlist' and @_ == 1){
    stop();
    my $name = shift;
    my $main = "$ENV{HOME}/.klomplist-main";
    my $alt = "$ENV{HOME}/.klomplist-$name";
    if(not -e $alt and not -e $main){
      backupPlaylist $main;
    }elsif(-e $alt and not -e $main){
      backupPlaylist $main;
      restorePlaylist $alt;
    }elsif(-e $main and not -e $alt){
      backupPlaylist $alt;
      restorePlaylist $main;
    }elsif(-e $main and -e $alt){
      die "it seems that another playlist {not main or $name} is active\n";
    }
  }elsif($cmd eq 'start'){
    stop;
    start;
  }elsif($cmd eq 'stop'){
    stop;
  }elsif($cmd eq 'pause'){
    if(not isRunning){
      stop;
      defaultPlaylist;
      start;
    }else{
      if(isPhone){
        stop;
      }else{
        system "echo pause > $FIFO";
      }
    }
  }elsif($cmd eq 'next'){
    stop;
    start if nextItem();
  }elsif($cmd eq 'shuffle'){
    system "sort -R $KLOMPLIST -o $KLOMPLIST";
  }elsif($cmd eq 'prev'){
    stop;
    start if prevItem();
  }elsif($cmd eq 'reset'){
    system "echo -n > $KLOMPLIST";
    system "echo -n > $KLOMPHIST";
  }else{
    my %okCmds = getAvailableInputCommands();
    if(defined $okCmds{$cmd}){
      system "echo \"$cmd @_\" > $FIFO";
    }else{
      die $usage;
    }
  }
}

sub backupPlaylist($){
  my $dir = shift;
  die "error: $dir already exists!\n" if -e $dir;
  system "mkdir", "-p", $dir;
  die "error: could not create $dir!\n" if not -e $dir;

  system "mv", "--no-clobber", $KLOMPCUR, $KLOMPLIST, $dir;
}

sub restorePlaylist($){
  my $dir = shift;
  die "error: $dir doesnt exist!\n" if not -e $dir;
  system "mv", "--no-clobber", "$dir/.klompcur", "$dir/.klomplist", $ENV{HOME};
  system "rmdir", $dir;
  die "error: $dir still exists!\n" if -e $dir;
}

sub getAvailableInputCommands(){
  my %cmds;
  my $_ = `mplayer -input cmdlist`;
  while(/^([a-z_]+)\s*(.*)/mg){
    $cmds{$1} = $2;
  }
  return %cmds;
}

sub isPhone(){
  return hostname() =~ /(n9|n900)$/i ? 1 : 0;
}
sub defaultPlaylist(){
  my @KLOMPLIST = -e $KLOMPLIST ? `cat $KLOMPLIST` : ();
  if(@KLOMPLIST == 0){
    system "$0 -a";
  }
}
sub start(){
  fork or exec "$klomplayerExec > /dev/null 2>/dev/null";
}

sub stop(){
  if(-e $PID_FILE){
    system "kill -9 `cat $PID_FILE`";
    system "rm $PID_FILE";
  }
  system "killall -9 mplayer" if isPhone;
  system "rm -f /tmp/klomplayer*";
}
sub isRunning(){
  if(-e $PID_FILE){
    system "kill -0 `cat $PID_FILE`";
    return $? == 0 ? 1 : 0;
  }else{
    return 0;
  }
}

sub wrapTokens(@){
  my @tokens;
  for my $token(@_){
    my $t = $token;
    $t =~ s/'/'\\''/g;
    push @tokens, "'$t'";
  }
  return @tokens;
}
sub shellQuiet(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd 2>/dev/null`;
}
sub shell(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd`;
}

sub popFile($){
  my $file = shift;
  if(not -e $file){
   return undef;
  }
  my @items = `cat $file`;
  if(@items == 0){
    return undef;
  }
  my $item = shift @items;

  open FH, "> $file";
  print FH @items;
  close FH;

  return $item;
}

sub pushFile($$){
  my $file = shift;
  my $item = shift;
  $item =~ s/\n*$/\n/;
  my @items = -e $file ? `cat $file` : ();
  @items = ($item, @items);
  open FH, "> $file";
  print FH @items;
  close FH;
}

sub getCur(){
  my $cur = -e $KLOMPCUR ? `cat $KLOMPCUR` : '';
  if($cur =~ /^[0-9\-\.]+ [0-9\-\.]+ (.*)$/s){
    my $item = $1;
    chomp $item;
    $item =~ s/\n/\/\/\/\\\\\\/g;
    return $item;
  }else{
    return undef;
  }
}

sub setCur($){
  my $item = shift;
  $item =~ s/\/\/\/\\\\\\/\n/g;
  open FH, "> $KLOMPCUR";
  print FH "0.0 0.0 $item\n";
  close FH;
}

sub addCurTimestamp($){
  my $cur = shift;
  $cur = removeCurTimestamp $cur;
  my $timestamp = `date`;
  chomp $timestamp;
  return "$cur###$timestamp###";
}
sub removeCurTimestamp($){
  my $cur = shift;
  $cur =~ s/###.*###$//;
  return $cur;
}

sub prevnext($$){
  my $srcFile = shift;
  my $destFile = shift;
  
  my $oldCur = getCur;
  $oldCur = addCurTimestamp $oldCur;
  my $cur = popFile $srcFile;
  $cur = removeCurTimestamp $cur;
  if(defined $cur){
    if(defined $oldCur){
      pushFile $destFile, $oldCur;
    }
    setCur $cur;
    return 1;
  }else{
    return 0;
  }
}

sub nextItem(){
  return prevnext $KLOMPLIST, $KLOMPHIST;
}

sub prevItem(){
  return prevnext $KLOMPHIST, $KLOMPLIST;
}

&main(@ARGV);
