#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Config;
use Klomp::Files;
use File::Basename 'basename';

my $KLOMP_PLAYLIST_EXEC = 'klomp-playlist';
my $klomplayerExec = 'klomplayer';
my $FILES = Klomp::Files::allKlompFiles();

my $DEFAULT_SEEK_BACK_ARG = 15;

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h
    show this message

  $EXEC playlist [ARG ARG ...]
    run $KLOMP_PLAYLIST_EXEC ARG ARG ...

  $EXEC start
    start klomplayer
  $EXEC stop
    stop klomplayer
  $EXEC restart
    if klomplayer is running: stop and then start

  $EXEC pause
    if klomplayer is not running: start klomplayer
    if klomplayer is running: send play/pause command to klomplayer
  $EXEC prev
    prepen current song on klomplist, and load last history entry as current song
    start klomplayer if prev-item existed and was not a shell command
  $EXEC next
    append current song to history, and load next klomplist entry as current song
    start klomplayer if next-item existed and was not a shell command

  $EXEC prev-force
    same as `$EXEC prev`, except always start klomplayer,
      even if prev-item did not exist or was a shell command
  $EXEC next-force
    same as `$EXEC next`, except always start klomplayer,
      even if next-item did not exist or was a shell command

  $EXEC is-playing
    if klomplayer is running AND is NOT paused:
      print \"playing\"
      exit with exit code 0
    if klomplayer is running and IS paused:
      print \"paused\"
      exit with exit code 1
    if klomplayer is not running:
      print \"stopped\"
      exit with exit code 1

  $EXEC seek SEEK_ARG
    set current position forward (+), backward (-), absolute (=),
      or absolute-from-end-of-song (T-)
    e.g.:
       +10   seek fwd 10.0s
       +30%  seek forward 30% of length (same as '+3:00' if song is 10min long)
       -1.5  seek backward 1.5s
       -5:35 seek backward 335.0s
       1:05  seek to absolute position 00:01:05.000
       65    seek to absolute position 00:01:05.000
       =65.2 seek to absolute position 00:01:05.200
       T-3.5 seek to absolute position of duration minus 3.5s
       t-90  seek to absolute position of duration minus 90s

    SEEK_ARG  = [SEEK_POS] | [SEEK_SIGN][SEEK_POS]
                if SEEK_SIGN is not given, default is =
    SEEK_POS  = [S|S.SS|HH:MM:SS|MM:SS|PERCENT%]
                fractional seconds,
                  or fractional hr:min:sec,
                  or fractional min:sec,
                  or integer percent of length
    SEEK_SIGN = + | - | = | T-
                direction to seek
                  +  is forward
                  -  is backward
                  =  is absolute position, forwards from start of song
                  T- is absolute position, backwards from end of song
                     (lowercase t- is also permitted)
  $EXEC seek-back [SEEK_POS]
    seek backwards, possibly to previous song
    SEEK_POS defaults to '15'

    if current position is on or after SEEK_POS, same as:
      `$EXEC seek -\$SEEK_POS`
    if current position is before SEEK_POS, same as:
      `$EXEC prev && $EXEC seek T-\$SEEK_POS`
  $EXEC jump [PERCENT|+PERCENT|-PERCENT]
    prev+seek, next+seek, or just seek
    split the current song into brackets of size PERCENT%

    for +PERCENT (or PERCENT):
      go to the next bracket or the first bracket of the next song
    for -PERCENT:
      if the current position is in the second half of the current bracket:
        go to the start of the current bracket
      if the current position is in the first half of the current bracket:
        go to the prev bracket or the last bracket of the previous song

    e.g.:
     (A) song5 at 10% => `jump +25%` =>           `seek =25%` => song5 at 25%
     (B) song5 at 10% => `jump -25%` => `prev` && `seek =75%` => song4 at 75%
     (C) song5 at 15% => `jump +25%` =>           `seek =25%` => song5 at 25%
     (D) song5 at 15% => `jump -25%` =>           `seek  =0%` => song5 at 0%
     (E) song5 at 74% => `jump +25%` =>           `seek =75%` => song5 at 75%
     (F) song5 at 75% => `jump +25%` => `next` && `seek  =0%` => song6 at 0%

     (A) (+25%) song4|=====|=====|=====|=====|
                song5|=S===|E====|=====|=====|
                song6|=====|=====|=====|=====|

     (B) (-25%) song4|=====|=====|=====|E====|
                song5|=S===|=====|=====|=====|
                song6|=====|=====|=====|=====|

     (C) (+25%) song4|=====|=====|=====|=====|
                song5|==S==|E====|=====|=====|
                song6|=====|=====|=====|=====|

     (D) (-25%) song4|=====|=====|=====|=====|
                song5|E=S==|=====|=====|=====|
                song6|=====|=====|=====|=====|

     (E) (+25%) song4|=====|=====|=====|=====|
                song5|=====|=====|====S|E====|
                song6|=====|=====|=====|=====|

     (F) (+25%) song4|=====|=====|=====|=====|
                song5|=====|=====|=====|S====|
                song6|E====|=====|=====|=====|

  $EXEC shuffle
    shuffle klomplist randomly

  $EXEC runcmd-on SHELL_CMD
     insert '!SHELL_CMD' afer every song in klomp list
     when `klomp-cmd next` is run, if the next entry is a '!' command,
       that cmd is run and the cur song is set to none
  $EXEC runcmd-off
     remove all '!' command entries from klomplist
  $EXEC runcmd-toggle SHELL_CMD
     if any '!' command entries are present in klomplist:
       $0 runcmd-off
     otherwise:
       $0 runcmd-on SHELL_CMD

  $EXEC fifo <FIFO input command>
    send mplayer or qtcmdplayer commands to the FIFO
      mplayer comands:
        see `mplayer -input cmdlist`
        {e.g.: $EXEC fifo seek 10}
      qtcmdplayer commands:
        pause
          toggle play/pause
        play
          toggle play/pause
        seek <ABSOLUTE_POSITION_MILLIS>
          seek to the indicated position in the song
";

sub getPid();
sub isRunning();
sub isPauseAllowed();
sub isFifoValid();
sub fifoCommand(@);
sub isPaused();
sub removePause();
sub pauseToStop();
sub start(;$);
sub stop();
sub getNice($);
sub maybeRenice();
sub shellQuiet(@);
sub prevItem();
sub nextItem();
sub parseSeekArg($);
sub seekPos($$);
sub jump($$);
sub setPosition($);
sub setKlompCurPos($);
sub getPosLen();
sub addCurTimestamp($);
sub removeCurTimestamp($);
sub anyRunCmdsPresent();
sub intersperseRunCmds($);
sub removeRunCmds();
sub maybePropCmd($);

sub main(@){
  my $targetUser = Klomp::Config::getProperty "targetUser";
  if(defined $targetUser and "$targetUser\n" ne `whoami`){
    print "rerunning as $targetUser\n";
    exec "sudo su -c '$0 @ARGV' $targetUser";
  }

  my $wasRunning = isRunning();

  my $cmd = shift() || '';
  if($cmd eq '-h'){
    print $usage;
    exit 0;
  }elsif($cmd eq 'playlist'){
    exec $KLOMP_PLAYLIST_EXEC, @_;
  }elsif($cmd eq 'start' and @_ == 0){
    stop;
    start;
    maybePropCmd("hardStartCmd") if not $wasRunning;
  }elsif($cmd eq 'stop' and @_ == 0){
    stop;
    maybePropCmd("hardStopCmd") if $wasRunning;
    removePause();
  }elsif($cmd eq 'is-playing' and @_ == 0){
    if($wasRunning){
      if(isPaused()){
        print "paused\n";
        exit 1;
      }else{
        print "playing\n";
      }
    }else{
      print "stopped\n";
      exit 1;
    }
  }elsif($cmd eq 'restart' and @_ == 0){
    if($wasRunning){
      stop;
      start 1;
    }
  }elsif($cmd eq 'pause' and @_ == 0){
    if($wasRunning and isPauseAllowed() and isFifoValid()){
      fifoCommandPause();
    }elsif($wasRunning){
      stop;
      maybePropCmd("hardStopCmd");
    }else{
      stop;
      start;
      maybePropCmd("hardStartCmd");
    }
  }elsif($cmd eq 'prev' and @_ == 0){
    stop;
    if(prevItem()){
      start;
      maybePropCmd("hardStartCmd") if not $wasRunning;
    }else{
      maybePropCmd("hardStopCmd") if $wasRunning;
    }
  }elsif($cmd eq 'next' and @_ == 0){
    stop;
    if(nextItem()){
      start;
      maybePropCmd("hardStartCmd") if not $wasRunning;
    }else{
      maybePropCmd("hardStopCmd") if $wasRunning;
    }
  }elsif($cmd eq 'prev-force' and @_ == 0){
    stop;
    prevItem();
    start;
    maybePropCmd("hardStartCmd") if not $wasRunning;
  }elsif($cmd eq 'next-force' and @_ == 0){
    stop;
    nextItem();
    start;
    maybePropCmd("hardStartCmd") if not $wasRunning;
  }elsif($cmd eq 'seek' and @_ == 1){
    my $seekArg = $_[0];
    my ($seekSign, $seekSex) = parseSeekArg $seekArg;
    seekPos($seekSign, $seekSex);
  }elsif($cmd eq 'seek-back' and (@_ == 0 or @_ == 1)){
    my $seekArg = @_ > 0 ? $_[0] : $DEFAULT_SEEK_BACK_ARG;
    my ($seekSign, $seekSex) = parseSeekArg $seekArg;
    if(defined $seekSign){
      die "ERROR: seek-back arg cannot specify sign\n";
    }
    seekBack($seekSex);
  }elsif($cmd eq 'jump' and @_ == 1 and $_[0] =~ /^(\+|-)?(\d+)$/){
    my $dir = $1 ne "-";
    my $percent = $2;
    die $usage if $percent <= 0 or $percent >= 100;
    jump($dir, $percent);
  }elsif($cmd eq 'shuffle' and @_ == 0){
    system "sort", "-R", $$FILES{list}, "-o", $$FILES{list};
  }elsif($cmd eq 'runcmd-on' and @_ == 1){
    my $runCmd = shift;
    intersperseRunCmds($runCmd);
  }elsif($cmd eq 'runcmd-off' and @_ == 0){
    removeRunCmds();
  }elsif($cmd eq 'runcmd-toggle' and @_ == 1){
    my $runCmd = shift;
    if(anyRunCmdsPresent()){
      removeRunCmds();
    }else{
      intersperseRunCmds($runCmd);
    }
  }elsif($cmd eq 'fifo' and @_ > 0){
    fifoCommand(@_);
  }else{
    die $usage;
  }
}

sub anyRunCmdsPresent(){
  my @lines = `cat $$FILES{list} 2>/dev/null`;
  for my $line(@lines){
    if($line =~ /^!/){
      return 1;
    }
  }
  return 0;
}

sub intersperseRunCmds($){
  my ($runCmd) = @_;
  my @lines = `cat $$FILES{list} 2>/dev/null`;
  my @newLines;
  for my $line(@lines){
    if($line !~ /^!/){
      push @newLines, "!$runCmd\n";
    }
    push @newLines, $line;
  }
  open FH, "> $$FILES{list}" or die "Couldn't write $$FILES{list}\n";
  print FH @newLines;
  close FH;
}

sub removeRunCmds(){
  my @lines = `cat $$FILES{list} 2>/dev/null`;
  my @newLines = grep {$_ !~ /^!/} @lines;
  open FH, "> $$FILES{list}" or die "Couldn't write $$FILES{list}\n";
  print FH @newLines;
  close FH;
}

sub getPid(){
  if(-e $$FILES{pidfile}){
    my $pid = `cat $$FILES{pidfile}`;
    chomp $pid;
    return $pid;
  }else{
    return undef;
  }
}

sub isRunning(){
  my $pid = getPid;
  if(defined $pid){
    system "kill", "-0", $pid;
    return $? == 0 ? 1 : 0;
  }else{
    return 0;
  }
}

sub isPauseAllowed(){
  my $disallowPause = Klomp::Config::getProperty "disallowPause";
  if(defined $disallowPause and $disallowPause =~ /true/i){
    return 0;
  }else{
    return 1;
  }
}

sub isFifoValid(){
  if(-p $$FILES{fifo}){
    return 1;
  }else{
    return 0;
  }
}

sub fifoCommand(@){
  if(isFifoValid){
    system "echo \"@_\" > $$FILES{fifo}";
  }else{
    print STDERR "WARNING: $$FILES{fifo} not valid\n";
  }
}

sub fifoCommandPause(){
  if(Klomp::Config::USE_MPLAYER()){
    fifoCommand("pause");
  }elsif(Klomp::Config::USE_QTCMDPLAYER()){
    fifoCommand("pause");
  }
}
sub fifoCommandSeek($){
  my ($sexPos) = @_;
  if(Klomp::Config::USE_MPLAYER()){
    fifoCommand("seek $sexPos 2");
  }elsif(Klomp::Config::USE_QTCMDPLAYER()){
    fifoCommand("seek " . int($sexPos * 1000 + 0.5));
  }
}

sub isPaused(){
  my $curFirstLine = undef;
  if(-e $$FILES{cur}){
    open FH, "< $$FILES{cur}";
    my @lines = <FH>;
    close FH;
    if(@lines > 0){
      $curFirstLine = $lines[0];
    }
  }

  if(defined $curFirstLine and $curFirstLine =~ /^([0-9.]+) ([0-9.]+) paused/){
    return 1;
  }else{
    return 0;
  }
}

sub removePause(){
  return if not -e $$FILES{cur};
  open FH, "< $$FILES{cur}";
  my @lines = <FH>;
  close FH;
  return if @lines == 0;

  my $wasPaused = 0;
  if($lines[0] =~ s/^([0-9.]+) ([0-9.]+) paused/$1 $2/){
    $wasPaused = 1;

    open FH, "> $$FILES{cur}";
    print FH @lines;
    close FH;
  }

  return $wasPaused;
}

sub pauseToStop(){
  my $wasRunning = isRunning();
  if(removePause()){
    stop();
    maybePropCmd("hardStopCmd") if $wasRunning;
  }
}

sub ensureKlompCur(){
  my @lines;
  if(-e $$FILES{cur}){
    open FH, "< $$FILES{cur}";
    @lines = <FH>;
    close FH;
  }

  nextItem() if @lines == 0;
}

sub start(;$){
  maybePropCmd("startCmd");
  removePause() unless @_ > 0 and $_[0];
  ensureKlompCur();

  if(fork()){
    exec "$klomplayerExec >/dev/null 2>/dev/null &";
  }
  maybeRenice();
}

sub stop(){
  my $pid = getPid();
  if(defined $pid){
    system "kill", "-9", $pid;
    system "rm", $$FILES{pidfile};
  }
  maybePropCmd("stopCmd");
  system "rm -f /tmp/klomplayer*";
}

sub getNice($){
  my $pid = shift;
  my $ps = `ps -o pid,nice | grep $pid`;
  if($ps =~ /^\s*\d+\s*(-?\d+)$/){
    return $1;
  }
  return '?';
}

sub maybeRenice(){
  my $renice = Klomp::Config::getProperty "renice";
  if(defined $renice and $renice =~ /^[+\-]?\d+$/){
    print "renicing to '$renice' in 1s..\n";
    sleep 1;
    my $pid = getPid();
    if(defined $pid){
      my $oldNice = getNice($pid);
      system "sudo", "renice", "-n", $renice, $pid;
      my $newNice = getNice($pid);
      print "reniced $pid: $oldNice => $newNice\n";
    }else{
      print "Could not renice; klomplayer not running\n";
    }
  }
}

sub wrapTokens(@){
  my @tokens;
  for my $token(@_){
    my $t = $token;
    $t =~ s/'/'\\''/g;
    push @tokens, "'$t'";
  }
  return @tokens;
}
sub shellQuiet(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd 2>/dev/null`;
}
sub shell(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd`;
}

sub popFile($){
  my $file = shift;
  if(not -e $file){
   return undef;
  }
  my @items = `cat $file`;
  if(@items == 0){
    return undef;
  }
  my $item = shift @items;

  open FH, "> $file";
  print FH @items;
  close FH;

  return $item;
}

sub pushFile($$){
  my $file = shift;
  my $item = shift;
  $item =~ s/\n*$/\n/;
  my @items = -e $file ? `cat $file` : ();
  @items = ($item, @items);
  open FH, "> $file";
  print FH @items;
  close FH;
}

sub getCur(){
  my $cur = -e $$FILES{cur} ? `cat $$FILES{cur}` : '';
  if($cur =~ /^[0-9\-\.]+ [0-9\-\.]+ (.*)$/s){
    my $item = $1;
    $item =~ s/\n+$//;
    chomp $item;
    $item =~ s/\n/\/\/\/\\\\\\/g;
    return $item;
  }else{
    return undef;
  }
}

sub setCur($){
  my $item = shift;
  if($item =~ /^!(.*)$/si){
    my $runCmd = $1;
    print "running ! shell command: $1\n";
    system "sh", "-c", $runCmd;
    system "rm", $$FILES{cur};
    return 0;
  }else{
    $item =~ s/\/\/\/\\\\\\/\n/g;
    chomp $item;
    open FH, "> $$FILES{cur}";
    print FH "0.0 0.0 $item\n";
    close FH;
    return 1;
  }
}

sub addCurTimestamp($){
  my $cur = shift;
  $cur = removeCurTimestamp $cur;
  my $timestamp = `date`;
  chomp $timestamp;
  return "$cur###$timestamp###";
}
sub removeCurTimestamp($){
  my $cur = shift;
  $cur =~ s/###.*###$//;
  return $cur;
}

sub prevnext($$){
  my $srcFile = shift;
  my $destFile = shift;

  my $oldCur = getCur;
  $oldCur = addCurTimestamp $oldCur if defined $oldCur;
  my $cur = popFile $srcFile;
  $cur = removeCurTimestamp $cur if defined $cur;
  if(defined $cur){
    if(defined $oldCur){
      pushFile $destFile, $oldCur;
    }
    return setCur $cur;
  }else{
    return 0;
  }
}

sub prevItem(){
  return prevnext $$FILES{hist}, $$FILES{list};
}

sub nextItem(){
  return prevnext $$FILES{list}, $$FILES{hist};
}

sub parseSeekArg($){
  my ($seekArg) = @_;
  my ($seekSign, $seekPos);

  my $signRE = "(?:\\+|-|=|T-)";
  my $numRE = "(?:\\d+|\\d*\\.\\d+)";
  if($seekArg =~ /^($signRE?)($numRE)%$/i){
    my ($sign, $percentPos) = ($1, $2);
    $seekSign = $sign;
    $seekPos = "$percentPos%";
  }elsif($seekArg =~ /^($signRE?)($numRE)$/i){
    my ($sign, $sexPos) = ($1, $2);
    $seekSign = $sign;
    $seekPos = $sexPos;
  }elsif($seekArg =~ /^($signRE?)($numRE):($numRE)$/i){
    my ($sign, $minPos, $sexPos) = ($1, $2, $3);
    $seekSign = $sign;
    $seekPos = $minPos*60.0 + $sexPos;
  }elsif($seekArg =~ /^($signRE?)($numRE):($numRE):($numRE)$/i){
    my ($sign, $hrPos, $minPos, $sexPos) = ($1, $2, $3, $4);
    $seekSign = $sign;
    $seekPos = $hrPos*60.0*60.0 + $minPos*60.0 + $sexPos;
  }else{
    die "invalid seek arg: $seekArg\n";
  }
  $seekSign = undef if $seekSign eq "";

  return ($seekSign, $seekPos);
}

sub seekPos($$){
  my ($seekSign, $seekPos) = @_;

  my ($oldPos, $oldLen) = getPosLen();

  my $seekSexPos;
  if($seekPos =~ /^(.+)%$/){
    $seekSexPos = $1 * $oldLen;
  }else{
    $seekSexPos = $seekPos;
  }

  $seekSign = "=" if not defined $seekSign or $seekSign eq "";
  $seekSign = uc $seekSign;

  my $newPos;
  if($seekSign eq "="){
    $newPos = $seekSexPos;
  }elsif($seekSign eq "+"){
    $newPos = $oldPos + $seekSexPos;
  }elsif($seekSign eq "-"){
    $newPos = $oldPos - $seekSexPos;
  }elsif($seekSign eq "T-"){
    $newPos = $oldLen - $seekSexPos;
  }else{
    die "ERROR: unknown seek sign $seekSign\n";
  }

  $newPos = 0 if $newPos < 0;

  setPosition $newPos;
}

sub seekBack($){
  my ($seekPos) = @_;
  my ($oldPos, $oldLen) = getPosLen();
  if($seekPos <= $oldPos){
    setPosition $oldPos - $seekPos;
  }else{
    pauseToStop();
    my $wasRunning = isRunning();
    stop;
    if(prevItem()){
      ($oldPos, $oldLen) = getPosLen();
      setPosition $oldLen - $seekPos;
      start if $wasRunning;
    }else{
      maybePropCmd("hardStopCmd") if $wasRunning;
    }
  }
}

sub setPosition($){
  my ($sexPos) = @_;
  my $wasRunning = isRunning();
  if($wasRunning and isFifoValid()){
    fifoCommandSeek($sexPos);
  }else{
    stop;
    setKlompCurPos $sexPos;
    start(1) if $wasRunning;
  }
}

sub setKlompCurPos($){
  return if not -e $$FILES{cur};
  my ($sexPos) = @_;

  open FH, "< $$FILES{cur}";
  my @lines = <FH>;
  close FH;
  return if @lines == 0;

  if($lines[0] !~ /^([0-9.]+) ([0-9.]+) /){
    die "MALFORMED CUR FILE, COULD NOT SEEK\n";
  }
  $sexPos = sprintf "%.2f", $sexPos;

  $lines[0] =~ s/^([0-9.]+) ([0-9.]+) /$sexPos $2 /;

  open FH, "> $$FILES{cur}";
  print FH @lines;
  close FH;
}

sub getCurPosFromPercent($){
  my ($percentPos) = @_;
  my ($pos, $len) = getPosLen();
  return $percentPos / 100 * $len;
}

sub getPosLen(){
  my $info = `klomp-info -s pos len`;
  if($info !~ /^(\d+(?:\.\d+)?) (\d+(?:\.\d+)?)$/){
    die "Error reading klomp-info\n";
  }
  my ($curPos, $curLen) = ($1, $2);
  die "Missing length info\n" if $curLen == 0;
  return ($curPos, $curLen);
}

sub jump($$){
  my ($dir, $percent) = @_;

  my ($curPos, $curLen) = getPosLen();

  $curPos += 0.02; #small margin of error for inexact seeking

  my $curPct = 100 * $curPos / $curLen;
  my $segmentStart = 0;
  while($segmentStart+$percent <= $curPct){
    $segmentStart += $percent;
  }

  my $target;
  if($dir){
    $target = $segmentStart + $percent;
  }else{
    if($curPct - $segmentStart > $percent/2){
      #if pos is more than halfway to next seg, jump to start of this seg
      $target = $segmentStart;
    }else{
      #otherwise, jump to start of previous seg
      $target = $segmentStart - $percent;
    }
  }

  my $wasRunningAndThenStopped = 0;
  if($target >= 100){
    pauseToStop();
    $wasRunningAndThenStopped = isRunning();
    stop;

    nextItem();
    $target = 0;
    ($curPos, $curLen) = getPosLen();
  }elsif($target < 0){
    pauseToStop();
    $wasRunningAndThenStopped = isRunning();
    stop;

    prevItem();
    $target += 100;
    ($curPos, $curLen) = getPosLen();
  }

  my $newPos = $target / 100 * $curLen;

  setPosition $newPos;

  start(1) if $wasRunningAndThenStopped;
}

sub maybePropCmd($){
  my $prop = shift;
  my $cmd = Klomp::Config::getProperty $prop;
  if(defined $cmd){
    print "running '$cmd'\n";
    $cmd =~ s/'/'\\''/g;
    system "bash -c '$cmd' >/dev/null 2>/dev/null &";
  }
}

&main(@ARGV);
