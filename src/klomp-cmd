#!/usr/bin/perl
use strict;
use warnings;
use Sys::Hostname;

my $usage = "Usage:
  $0 -h    - show this message
  $0 playlist NAME - toggle between playlist NAME and the main playlist
     NAME cannot be 'main', and may contain only letters, numbers, or _s
     .klompcur and .klomplist are moved between three dirs
       HOME
       MAIN {\"HOME/.klomplist-main/\"}
       NAME {\"HOME/.klomplist-NAME/\"}
     if neither NAME nor MAIN exist:
       HOME => MAIN
     if NAME exists and MAIN does not:
       HOME => MAIN
       NAME => HOME
     if main exists and HOME does not:
       HOME => NAME
       MAIN => HOME
  $0 playlist-main - if a named playlist is set, unset it
  $0 start - start
  $0 stop - stop
  $0 pause - play/pause
  $0 prev - previous song
  $0 next - skip song
  $0 shuffle - shuffle klomplist randomly
  $0 breaks [on|off|toggle] - add/remove '!klomp-cmd stop's in klomplist
     {e.g.: for sleeping with a book and not losing more than a chapter}
     on: remove all stops, and place a stop after each song except the last
     off: remove all stops
     toggle: if any stops are present, same as off, else same as on
  $0 <mplayer slave input command>
     see: mplayer -input cmdlist
     for complete command list
     {e.g.: $0 seek 10}
";

sub isPhone();
sub start();
sub stop();
sub isRunning();
sub shellQuiet(@);
sub prevItem();
sub nextItem();
sub addCurTimestamp($);
sub removeCurTimestamp($);
sub backupPlaylist($);
sub restorePlaylist($);
sub getPlaylistName();
sub setPlaylistName($);
sub setBreaks($);

if(isPhone and `whoami` =~ /^root(\n|$)/){
  print "you are root. rerunning as user\n";
  exec "su -c '$0 @ARGV' user";
}

my $klomplayerExec = 'klomplayer';
my $KLOMPCUR = "$ENV{HOME}/.klompcur";
my $KLOMPLIST = "$ENV{HOME}/.klomplist";
my $KLOMPHIST = "$ENV{HOME}/.klomphistory";
my $KLOMPLISTNAME = "$ENV{HOME}/.klomplist-name";
my $FIFO = '/tmp/klomplayer_fifo';
my $PID_FILE = '/tmp/klomplayer_pid';

sub main(@){
  my $cmd = shift() || '';
  if($cmd eq '-h'){
    print $usage;
    exit 0;
  }elsif($cmd eq 'playlist' and @_ == 1){
    stop();
    my $name = shift;
    if($name eq 'main' or $name !~ /^[a-zA-Z0-9_]+$/){
      die "Invalid playlist name: '$name'\n"
    }
    my $main = "$ENV{HOME}/.klomplist-main";
    my $alt = "$ENV{HOME}/.klomplist-$name";

    my $oldName = getPlaylistName;
    if(defined $oldName){
      if($oldName eq $name){
        backupPlaylist $alt;
        restorePlaylist $main if -e $main;
        setPlaylistName undef;
        system "rmdir $alt 2>/dev/null";
      }else{
        die "must turn off playlist $oldName before toggling $name\n";
      }
    }else{
      backupPlaylist $main;
      restorePlaylist $alt if -e $alt;
      setPlaylistName $name;
    }
  }elsif($cmd eq 'playlist-main'){
    my $name = getPlaylistName;
    if(defined $name){
      system $0, 'playlist', $name;
    }
  }elsif($cmd eq 'start' and @_ == 0){
    stop;
    start;
  }elsif($cmd eq 'stop' and @_ == 0){
    stop;
  }elsif($cmd eq 'pause' and @_ == 0){
    if(not isRunning){
      stop;
      start;
    }else{
      if(isPhone){
        stop;
      }else{
        system "echo pause > $FIFO";
      }
    }
  }elsif($cmd eq 'prev' and @_ == 0){
    stop;
    start if prevItem();
  }elsif($cmd eq 'next' and @_ == 0){
    stop;
    start if nextItem();
  }elsif($cmd eq 'shuffle' and @_ == 0){
    system "sort -R $KLOMPLIST -o $KLOMPLIST";
  }elsif($cmd eq 'breaks' and @_ == 1){
    my $arg = shift;
    die "invalid argument to breaks\n" if $arg !~ /^(on|off|toggle)$/;
    setBreaks $arg;
  }else{
    my %okCmds = getAvailableInputCommands();
    if(defined $okCmds{$cmd}){
      system "echo \"$cmd @_\" > $FIFO";
    }else{
      die $usage;
    }
  }
}

sub getPlaylistName(){
  my $name;
  if(-e $KLOMPLISTNAME){
    $name = `cat $KLOMPLISTNAME`;
    chomp $name;
  }
  $name = undef if defined $name and length $name == 0;
  return $name;
}
sub setPlaylistName($){
  my $name = shift;
  $name = '' if not defined $name;
  system "rm", "-f", $KLOMPLISTNAME;
  if(length $name > 0){
    open FH, "> $KLOMPLISTNAME" or die "Couldn't write $KLOMPLISTNAME\n";
    print FH "$name\n";
    close FH;
  }
}

sub backupPlaylist($){
  my $dir = shift;
  die "error: $dir already exists!\n" if -e $dir;
  system "mkdir", "-p", $dir;
  die "error: could not create $dir!\n" if not -e $dir;

  system "mv", "--no-clobber", $KLOMPCUR, $KLOMPLIST, $dir;
}
sub restorePlaylist($){
  my $dir = shift;
  die "error: $dir doesnt exist!\n" if not -e $dir;
  system "mv", "--no-clobber", "$dir/.klompcur", "$dir/.klomplist", $ENV{HOME};
  system "rmdir", $dir;
  die "error: $dir still exists!\n" if -e $dir;
}

sub setBreaks($){
  my $arg = shift;
  my $breakLine = "!klomp-cmd stop\n";
  my @lines = `cat $KLOMPLIST 2>/dev/null`;
  my @nonBreakLines = grep {$_ ne $breakLine} @lines;
  my @newLines;
  if($arg eq 'on' or ($arg eq 'toggle' and @nonBreakLines == @lines)){
    for(my $i=0; $i<@nonBreakLines; $i++){
      push @newLines, $nonBreakLines[$i];
      push @newLines, $breakLine if $i ne $#nonBreakLines;
    }
  }else{
    @newLines = @nonBreakLines;
  }
  open FH, "> $KLOMPLIST" or die "Couldn't write $KLOMPLIST\n";
  print FH @newLines;
  close FH;
}

sub getAvailableInputCommands(){
  my %cmds;
  my $_ = `mplayer -input cmdlist`;
  while(/^([a-z_]+)\s*(.*)/mg){
    $cmds{$1} = $2;
  }
  return %cmds;
}

sub isPhone(){
  return hostname() =~ /(n9|n900)$/i ? 1 : 0;
}
sub start(){
  fork or exec "$klomplayerExec > /dev/null 2>/dev/null";
}

sub stop(){
  if(-e $PID_FILE){
    system "kill -9 `cat $PID_FILE`";
    system "rm $PID_FILE";
  }
  system "killall -9 mplayer" if isPhone;
  system "rm -f /tmp/klomplayer*";
}
sub isRunning(){
  if(-e $PID_FILE){
    system "kill -0 `cat $PID_FILE`";
    return $? == 0 ? 1 : 0;
  }else{
    return 0;
  }
}

sub wrapTokens(@){
  my @tokens;
  for my $token(@_){
    my $t = $token;
    $t =~ s/'/'\\''/g;
    push @tokens, "'$t'";
  }
  return @tokens;
}
sub shellQuiet(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd 2>/dev/null`;
}
sub shell(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd`;
}

sub popFile($){
  my $file = shift;
  if(not -e $file){
   return undef;
  }
  my @items = `cat $file`;
  if(@items == 0){
    return undef;
  }
  my $item = shift @items;

  open FH, "> $file";
  print FH @items;
  close FH;

  return $item;
}

sub pushFile($$){
  my $file = shift;
  my $item = shift;
  $item =~ s/\n*$/\n/;
  my @items = -e $file ? `cat $file` : ();
  @items = ($item, @items);
  open FH, "> $file";
  print FH @items;
  close FH;
}

sub getCur(){
  my $cur = -e $KLOMPCUR ? `cat $KLOMPCUR` : '';
  if($cur =~ /^[0-9\-\.]+ [0-9\-\.]+ (.*)$/s){
    my $item = $1;
    chomp $item;
    $item =~ s/\n/\/\/\/\\\\\\/g;
    return $item;
  }else{
    return undef;
  }
}

sub setCur($){
  my $item = shift;
  if($item =~ /^!klomp-cmd (.*)$/si){
    print "running klomp-cmd: $1\n";
    system "$0 $1";
    return 0;
  }else{
    $item =~ s/\/\/\/\\\\\\/\n/g;
    open FH, "> $KLOMPCUR";
    print FH "0.0 0.0 $item\n";
    close FH;
    return 1;
  }
}

sub addCurTimestamp($){
  my $cur = shift;
  $cur = removeCurTimestamp $cur;
  my $timestamp = `date`;
  chomp $timestamp;
  return "$cur###$timestamp###";
}
sub removeCurTimestamp($){
  my $cur = shift;
  $cur =~ s/###.*###$//;
  return $cur;
}

sub prevnext($$){
  my $srcFile = shift;
  my $destFile = shift;
  
  my $oldCur = getCur;
  $oldCur = addCurTimestamp $oldCur if defined $oldCur;
  my $cur = popFile $srcFile;
  $cur = removeCurTimestamp $cur;
  if(defined $cur){
    if(defined $oldCur){
      pushFile $destFile, $oldCur;
    }
    return setCur $cur;
  }else{
    return 0;
  }
}

sub prevItem(){
  return prevnext $KLOMPHIST, $KLOMPLIST;
}

sub nextItem(){
  return prevnext $KLOMPLIST, $KLOMPHIST;
}

&main(@ARGV);
