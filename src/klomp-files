#!/usr/bin/perl
use strict;
use warnings;

my $files = {
  db           => "$ENV{HOME}/.klompdb",
  cur          => "$ENV{HOME}/.klompcur",
  list         => "$ENV{HOME}/.klomplist",
  history      => "$ENV{HOME}/.klomphistory",
  lib          => "$ENV{HOME}/.klomplib",
  playlistname => "$ENV{HOME}/.klomplist",
  playlistdir  => "$ENV{HOME}/.klomplist-",
  fifo         => "/tmp/klomplayer_fifo",
  fifopidfile  => "/tmp/klomplayer_fifo_pid",
  termpidfile  => "/tmp/klomp_term_pid",
  pidfile      => "/tmp/klomplayer_pid",
};
my $synonyms = {
  plname => 'playlistname',
  pldir => 'playlistdir',
  hist => 'history',
};
for my $key(keys %$synonyms){
  $$files{$key} = $$files{$$synonyms{$key}};
}

my $okFiles = join "|", sort keys %$files;

my $usage = "Usage:
  $0 [-n] $okFiles
    Print the absolute path to the file.
  $0 [-n] eval
    Print some perl code that evaluates to a hash of all the files.

  -n    do not output a trailing newline
";

sub main(@){
  my $newline = 1;
  if(@_ > 0 and $_[0] eq '-n'){
    $newline = 0;
    shift;
  }

  my $arg = shift() || '';
  if($arg =~ /^($okFiles)$/){
    print "$$files{$arg}";
  }elsif($arg eq 'eval'){
    print "{";
    for my $key(keys %$files){
      print "\"$key\",\"$$files{$key}\",";
    }
    print "}";
  }else{
    die $usage;
  }

  print "\n" if $newline;
}

&main(@ARGV);
