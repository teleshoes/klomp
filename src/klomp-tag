#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Tag;

my @cols = qw(title artist album number date genre);
my $colUsage = join "|", @cols;

my $usage = "Usage:
  $0 song
     Reads tags for a variety of files and prints them
  $0 --guess=($colUsage) path-hint [value-hint]
     Does not look at the file.
     Prints a reasonable value based on the path-hint,
       or if value-hint is passed in, transliterates/normalizes/strips
       non-ascii characters
     e.g.:
       > $0 --guess=album 'The Beatles/Revolver/01-Taxman.flac'
       Revolver
       > $0 --guess=title 'Ponyo/01-深海牧場.flac' '深海牧場'
       fukami/shinkaibokujou/makiba
       > $0 --guess=date 'Nicole Atkins/Neptune City [2007]/04 Cool Enough.ogg'
       2007
  $0 [-h|--help]
      Print this usage
";

sub main(@){
  die $usage if @_ == 0 or $_[0] eq '-h' or $_[0] eq '--help';
  if($_[0] =~ /^--guess=([a-z]+)$/i){
    my $col = $1;
    my %okCols = map{$_ => 1} @cols;
    die $usage if not defined $okCols{$col};

    my ($pathHint, $valueHint);
    if(@_ == 2){
      $pathHint = $_[1];
      $valueHint = '';
    }elsif(@_ ==3){
      $pathHint = $_[1];
      $valueHint = $_[2];
    }else{
      die $usage;
    }

    print Klomp::Tag::guess($col, $pathHint, $valueHint) . "\n";
  }else{
    my $path = shift;
    die $usage if @_ > 0;
    my %tags = Klomp::Tag::readTags $path;
    print ''
      . "title:$tags{title}\n"
      . "artist:$tags{artist}\n"
      . "album:$tags{album}\n"
      . "number:$tags{number}\n"
      . "date:$tags{date}\n"
      . "genre:$tags{genre}\n"
      ;
  }
}

&main(@ARGV);
