#!/usr/bin/perl
#Copyright 2011,2013 by Elliot Wolk
#This is free software, released under the GPLv3
use strict;
use warnings;

my $quality = 6;
my $dir2oggExec = 'dir2ogg';

my $usage = "Usage
  $0 SRC DEST
    Convert FLAC files under <SRC> to ogg vorbis.
    Move the OGGs to a mirrored directory structure under <DEST>.

    e.g.:  $0 ~/Music/flacs ~/Music/oggs
      \"/home/user/Music/flacs/Beatles/RubberSoul/DriveMyCar.flac\"
      =>
      \"/home/user/Music/flacs/Beatles/RubberSoul/DriveMyCar.ogg\"

    If an OGG file exists with the same modified-timestamp as the FLAC file,
      that file is skipped.
    If an OGG file exists with a different modified-timestamp,
      it is deleted.

    OGG quality is set to $quality.
";

sub shellQuiet(@);
sub convert($$$);
sub runConversionJobs($$$);

sub getBasenames($$){
  my ($type, $dir) = @_;
  my @files = `cd $dir; find -iname '*.$type'`;
  my @basenames;
  for my $file(sort @files){
    chomp $file;
    $file =~ /^(.*)\.($type)$/i;
    die "Malformed file {suffix must '.$type' and lowercase}\n" if $2 ne $type;
    push @basenames, $1;
  }
  return @basenames;
}

sub fsize($){
  return (stat $_[0])[7];
}
sub mtime($){
  return (stat $_[0])[9];
}
sub getCpuCoreCount(){
  my $cores = `cat /proc/cpuinfo | grep ^processor | wc -l`;
  chomp $cores;
  $cores = 2 if $cores !~ /^\d+$/;
  return $cores;
}
sub splitBuckets($\@){
  my $bucketSize = shift;
  my @elems = @{shift()};

  my @buckets;
  for(my $i=0; $i<@elems; $i++){
    my $b = $i % $bucketSize;
    while($b >= @buckets){
      push @buckets, [];
    }
    push @{$buckets[$b]}, $elems[$i];
  }

  return @buckets;
}

sub oggUnmodified($$$){
  my ($basename, $srcDir, $destDir) = @_;
  my $flac = "$srcDir/$basename.flac";
  my $ogg = "$destDir/$basename.ogg";
  my $fm = mtime $flac;
  my $om = mtime $ogg;
  return (-f $flac and -f $ogg and mtime $flac eq mtime $ogg);
}

sub main(@){
  my $srcDir = shift;
  my $destDir = shift;

  die $usage if @_ > 0 or not defined $srcDir or not defined $destDir;
  die "src '$srcDir' is not a directory" if not -d $srcDir;
  die "dest '$destDir' is not a directory" if not -d $destDir;

  system "$dir2oggExec --help > /dev/null";
  die "could not exec dir2ogg" if $? != 0;

  my %skippedBasenames;
  for my $basename(getBasenames 'ogg', $destDir){
    if(oggUnmodified $basename, $srcDir, $destDir){
      $skippedBasenames{$basename} = 1;
    }else{
      my $ogg = "$destDir/$basename.ogg";
      print "removing $ogg\n";
      #system "rm", $ogg;
    }
  }

  my @flacBasenames = getBasenames 'flac', $srcDir;
  @flacBasenames = grep {not defined $skippedBasenames{$_}} @flacBasenames;

  my $flacCount = @flacBasenames;
  my $skippedCount = keys %skippedBasenames;
  print "Converting $flacCount flacs, skipped $skippedCount\n";

  my @statuses = runConversionJobs $srcDir, $destDir, \@flacBasenames;

  my %statusMap;
  for my $line(@statuses){
    if($line =~ /^success: (.*)/){
      $statusMap{$1} = 1;
    }elsif($line =~ /^failure: (.*)/){
      $statusMap{$1} = 0;
    }
  }
  for my $basename(@flacBasenames){
    $statusMap{$basename} = 0 if not defined $statusMap{$basename};
  }

  my @successes = grep {$statusMap{$_}} keys %statusMap;
  my @failures = grep {not $statusMap{$_}} keys %statusMap;

  if(@successes > 0){
    print "  successfully converted " . scalar(@successes) . " flacs\n";
    print join("\n", @successes) . "\n";
  }

  if(@failures > 0){
    print STDERR "There were " . scalar(@failures) . " failures\n";
    print STDERR join("\n", @failures) . "\n";
    exit 1;
  }

  system "find $destDir -depth -type d -empty -execdir rmdir {} \\;";
  mkdir $destDir;
}



sub wrapTokens(@){
  my @tokens;
  for my $token(@_){
    my $t = $token;
    $t =~ s/'/'\\''/g;
    push @tokens, "'$t'";
  }
  return @tokens;
}
sub shellQuiet(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd 2>/dev/null`;
}
sub shell(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd`;
}

sub runConversionJobs($$$){
  my ($srcDir, $destDir, $basenames) = @_;

  my %flacSizes;
  for my $basename(@$basenames){
    $flacSizes{$basename} = fsize "$srcDir/$basename.flac";
  }

  $basenames = [sort { $flacSizes{$b} <=> $flacSizes{$a} } @$basenames];

  my @workers = splitBuckets getCpuCoreCount(), @$basenames;
  my $baseLog = '/tmp/flacmirror_' . time;
  my @workerLogFiles = map {"$baseLog-$_.log"} (0..$#workers);

  my @pids;
  for(my $w=0; $w<@workers; $w++){
    my @jobFlacBasenames = @{$workers[$w]};
    my $pid = fork;
    if(not $pid){
      my $bytes=0;
      for my $basename(@jobFlacBasenames){
        $bytes += $flacSizes{$basename};
      }
      my $count = length @jobFlacBasenames;
      print "worker#$w starting $count flacs with total filesize $bytes\n";

      my $logFile = $workerLogFiles[$w];
      push @workerLogFiles, $logFile;

      open FH, "> $logFile" or die "Could not open log file $logFile\n";
      for my $basename(@jobFlacBasenames){
        my $msg = convert $basename, $srcDir, $destDir;
        print FH $msg;
      }
      close FH;
      exit 0;
    }else{
      push @pids, $pid;
    }
  }

  for my $pid(@pids){
    waitpid $pid, 0;
  }

  my @statuses;
  for my $logFile(@workerLogFiles){
    open FH, "< $logFile" or die "Couldnt read logfile $logFile\n";
    @statuses = (@statuses, <FH>);
    close FH;
  }
  @statuses = sort @statuses;
  return @statuses;
}

sub convert($$$){
  my $basename = shift;
  my $srcDir = shift;
  my $destDir = shift;

  my $basedir = $basename;
  $basedir =~ s/\/[^\/]*$//;
  system "mkdir", "-p", "$destDir/$basedir";
  return "failure: $basename\n" if $? != 0;

  system $dir2oggExec, "--quality=$quality", "$srcDir/$basename.flac";
  return "failure: $basename\n" if $? != 0;

  system 'mv', "$srcDir/$basename.ogg", "$destDir/$basename.ogg";
  return "failure: $basename\n" if $? != 0;

  system 'touch', '-r', "$srcDir/$basename.flac", "$destDir/$basename.ogg";
  return "failure: $basename\n" if $? != 0;

  return "success: $basename\n";
}

&main(@ARGV);
