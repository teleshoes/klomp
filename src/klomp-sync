#!/usr/bin/perl
use strict;
use warnings;

sub runOrDie(@);
sub remoteSync($$);
sub sync($$$);
sub syncDir($$$@);

my $klompDb = "$ENV{HOME}/.klompdb";

my $klompLib = "$ENV{HOME}/.klomplib";
my $tmpKlompLib = "/tmp/klomp-sync_" . time();

my %okExts = map {$_ => 1} qw(
  flac 
  ogg
  wav
  mp3 m4a wma
);

my $usage = "Usage:
  $0 -h|--help
    print this message
  $0 HOST [--flacs]
    Overwrite remote klompdb with local klompdb.
    Sync from the local dirs in $klompLib
      to the remote dirs in HOST:~/.klomplib
  $0 --local KLOMP_LIB_FILE [--flacs]
    Sync from the local dirs in $klompLib
      to the local dirs in KLOMP_LIB_FILE.

  --flacs
     Always copy flac files.
     Normally, if the destination klomplib has a flacmirror, flacs are omitted.
  --local
     Specify a local klomplib and copy locally.

  HOST
    SSH host string {[user\@]hostname} e.g.: ubuntu\@my-desktop
  KLOMP_LIB_FILE
    local file to use when syncing locally
";

sub main(@){
  if(@_ == 0 or $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }

  my ($host, $localKlompLib);
  if(@_ >= 2 and $_[0] eq "--local"){
    shift;
    $localKlompLib = shift;
  }else{
    $host = shift;
  }

  my $includeFlacs = 0;
  if(@_ > 1 and $_[0] eq '--flacs'){
    shift;
    $includeFlacs = 1;
  }

  die $usage if @_ > 0;

  if(defined $host){
    remoteSync($host, $includeFlacs);
  }elsif(defined $localKlompLib){
    sync(undef, $localKlompLib, $includeFlacs);
  }
}

sub runOrDie(@){
  print "@_\n";
  system @_;
  die "'@_' failed with exit code $?\n" if $? != 0;
}

sub remoteSync($$){
  my $host = shift;
  my $includeFlacs = shift;

  print "Copying remote .klomplib here to read\n";
  system 'scp', "$host:~/.klomplib", $tmpKlompLib;
  die "Error copying $host:~/.klomplib\n" if not -e $tmpKlompLib;

  print "Overwriting remote .klompdb with local .klompdb\n";
  system 'scp', $klompDb, "$host:~";

  sync($host, $tmpKlompLib, $includeFlacs);
}

sub sync($$$){
  my $host = shift;
  my $klompLib = shift;
  my $includeFlacs = shift;

  my %libs = map {chomp; $_ => 1} `klomp-lib`;
  my %remoteLibs = map {chomp; $_ => 1} `klomp-lib --file=$klompLib`;

  for my $lib(sort keys %libs){
    print "\n\nSYNCING $lib\n";
    if(not defined $remoteLibs{$lib}){
      print "not in remote .klomplib, skipping..\n";
      next;
    }
    my $path = `klomp-lib -l $lib`;
    chomp $path;
    my $remotePath = `klomp-lib --file=$klompLib -l $lib`;
    chomp $remotePath;

    my $flacmirrorPath = `klomp-lib -f $lib`;
    chomp $flacmirrorPath;
    
    my $remoteFlacmirrorPath = `klomp-lib --file=$klompLib -f $lib`;
    chomp $remoteFlacmirrorPath;

    my %exts = %okExts;
    if($includeFlacs or not $flacmirrorPath or not $remoteFlacmirrorPath){
      print "COPYING FLACS\n";
    }else{
      print "ignoring flacs\n";
      delete $exts{flac};
    }
    my @whitelist = map {"*.$_"} keys %exts;
    syncDir $path, $remotePath, $host, @whitelist;

    print "\n\nflacmirror for: $lib\n";
    if($flacmirrorPath and $remoteFlacmirrorPath){
      syncDir $flacmirrorPath, $remoteFlacmirrorPath, $host, "*.ogg";
    }else{
      print "skipping, flacmirror must to be set in both lib files";
    }
  }
}

sub syncDir($$$@){
  my ($local, $remote, $host, @whitelist) = @_;

  my @args;
  #include subdirs
  push @args, "--include=*/";
  for my $pattern(@whitelist){
    push @args, "--include=$pattern";
    push @args, "--include=" . uc($pattern);
  }
  #exclude everything
  push @args, "--exclude=*";

  #delete trailing slashes
  $local =~ s/\/$//;
  $remote =~ s/\/$//;

  if(defined $host){
    runOrDie "ssh", "$host", "mkdir -p $remote";
  }else{
    runOrDie "mkdir -p $remote";
  }

  my $dest = defined $host ? "$host:$remote" : $remote;

  runOrDie "presync", "$local", $dest;
  runOrDie "rsync",
    "--delete-after", "-av",
    "--progress",
    "$local/",
    $dest,
    @args;
}

&main(@ARGV);
