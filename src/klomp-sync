#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Config;
use Klomp::Files;
use Klomp::Lib;
use File::Basename qw(basename);

sub runOrDie(@);
sub remoteSync($$$$$);
sub sync($$$$$$$);
sub syncDir($$$$@);

my $KLOMP_DB = Klomp::Files::klompFile("db");
my $KLOMP_DATE_CACHE = Klomp::Files::klompFile("datecache");

my $KLOMP_LIB = Klomp::Files::klompFile("lib");

my $ALL_LIBS_REGEX = join "|", Klomp::Lib::getAllLibNames;

my $FLAC_EXT = "flac";
my $OGG_EXT = "ogg";
my @OTHER_SYNC_EXTS = qw(wav mp3 m4a wma);

my $FLAC_SYNC_MODE_MIRROR = "mirror";
my $FLAC_SYNC_MODE_ALWAYS = "always";

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    print this message
  $EXEC [OPTS] HOST [LIB LIB LIB...]
    Overwrite remote klompdb with local klompdb.
    Sync from the local dirs in $KLOMP_LIB
      to the remote dirs in the klomplib on HOST
  $EXEC [OPTS] --local KLOMP_LIB_FILE KLOMP_CONFIG_FILE [LIB LIB LIB...]
    Sync from the local dirs in $KLOMP_LIB
      to the local dirs in KLOMP_LIB_FILE.

  HOST = HOSTNAME | USER\@HOSTNAME
    SSH host string, e.g.: ubuntu\@my-desktop
    either HOST or --local=LOCAL_DEST_DIR is required

  KLOMP_LIB_FILE
    local klomp lib file to use with --local

  KLOMP_CONFIG_FILE
    local klomp config file to use with --local

  LIB = $ALL_LIBS_REGEX
    Only sync libraries for indicated LIB args, if given (default is all)
    LIB must match the full library name, case-insensitive

  OPTS
    --override-lib-dir=OLD_LIB_SUB_DIR:NEW_LIB_SUB_DIR
      when syncing dirs (remote or local), override lib file paths
        OLD_LIB_SUB_DIR and NEW_LIB_SUB_DIR must end in '/'
      can be specified multiple times
      e.g.: --override-lib-dir=/home/user/Music/:/media/user/MUSIC/
        will replace '/home/user/Music/' with '/media/user/Music'
        for all DEST_LIB_DIR and DEST_FLACMIRROR_DIR read from DEST_KLOMP_LIB

    --flacs-always | --flacs
      always copy flac files, even if DEST_FLACMIRROR_DIR is set for the LIB
    --flacs-mirror
      copy flac files unless DEST_FLACMIRROR_DIR is set for the LIB
      (this is the default)

    --presync
      Run `presync` runs before `rsync`.
      If files have been moved or renamed locally, `presync` moves the files on
        the destination rather than copying and deleting.
      It's fairly fast, and can save huge amounts of time.
";

sub main(@){
  my $host = undef;
  my $localKlompLib = undef;
  my $localKlompConfig = undef;
  my $flacSyncMode = $FLAC_SYNC_MODE_MIRROR;
  my $presync = 0;
  my $libSubDirOverrides = [];
  my $libWhitelist = [];
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--local)$/ and @_ >= 2){
      $localKlompLib = shift;
      $localKlompConfig = shift;
    }elsif($arg =~ /^(--flacs-always|--flacs)$/){
      $flacSyncMode = $FLAC_SYNC_MODE_ALWAYS;
    }elsif($arg =~ /^(--flacs-mirror)$/){
      $flacSyncMode = $FLAC_SYNC_MODE_MIRROR;
    }elsif($arg =~ /^(--presync)$/){
      $presync = 1;
    }elsif($arg =~ /^--override-lib-dir=(.+\/):(.+\/)$/i){
      push @$libSubDirOverrides, [$1, $2];
    }elsif($arg =~ /^($ALL_LIBS_REGEX)$/i){
      push @$libWhitelist, $arg;
    }elsif(not defined $host){
      $host = $arg;
    }else{
      die "$usage\n\nERROR: unknown arg $arg\n";
    }
  }

  if(defined $host and not defined $localKlompLib){
    remoteSync($host, $flacSyncMode, $presync, $libSubDirOverrides, $libWhitelist);
  }elsif(not defined $host and defined $localKlompLib){
    sync(undef, $localKlompLib, $localKlompConfig, $flacSyncMode, $presync, $libSubDirOverrides, $libWhitelist);
  }elsif(defined $host and defined $localKlompLib){
    die "$usage\n\nERROR: cannot specify HOST ($host) and KLOMP_LIB_FILE ($localKlompLib)\n";
  }else{
    die "$usage\n\nERROR: must specify HOST or KLOMP_LIB_FILE\n";
  }
}

sub runOrDie(@){
  print "@_\n";
  system @_;
  die "'@_' failed with exit code $?\n" if $? != 0;
}

sub remoteSync($$$$$){
  my ($host, $flacSyncMode, $presync, $libSubDirOverrides, $libWhitelist) = @_;

  print "Getting remote lib path\n";
  my $lib = `ssh $host klomp-files lib`;
  chomp $lib;
  die "Could not find lib file with klomp-files\n" if $lib =~ /^\s*$/;

  print "Getting remote config path\n";
  my $config = `ssh $host klomp-files config`;
  chomp $config;
  die "Could not find config file with klomp-files\n" if $config =~ /^\s*$/;

  print "Getting remote db path\n";
  my $db = `ssh $host klomp-files db`;
  chomp $db;
  die "Could not find db file with klomp-files\n" if $db =~ /^\s*$/;

  print "Getting remote dateCache path\n";
  my $dateCache = `ssh $host klomp-files datecache`;
  chomp $dateCache;
  die "Could not find dateCache file with klomp-files\n" if $dateCache =~ /^\s*$/;

  my $now = time();

  my $tmpDestLib = "/tmp/klomp-sync-$now-lib";
  my $tmpDestConfig = "/tmp/klomp-sync-$now-config";

  print "Copying remote klomp lib here to read\n";
  system 'scp', "$host:$lib", $tmpDestLib;
  die "Error copying $host:$lib\n" if not -e $tmpDestLib;

  print "Copying remote klomp config here to read\n";
  system 'scp', "$host:$config", $tmpDestConfig;
  die "Error copying $host:$config\n" if not -e $tmpDestConfig;

  print "Overwriting remote klompdb with local klompdb\n";
  system 'rsync', "-c", "-v", "-P", $KLOMP_DB, "$host:$db";

  if(-f $KLOMP_DATE_CACHE){
    print "Overwriting remote datecache with local datecache\n";
    system 'rsync', "-c", "-v", "-P", $KLOMP_DATE_CACHE, "$host:$dateCache";
  }

  sync($host, $tmpDestLib, $tmpDestConfig, $flacSyncMode, $presync, $libSubDirOverrides, $libWhitelist);
}

sub sync($$$$$$$){
  my ($host, $tmpDestLib, $tmpDestConfig, $flacSyncMode, $presync, $libSubDirOverrides, $libWhitelist) = @_;

  my %libs = map {$_ => 1} Klomp::Lib::getAllLibNames;
  my %remoteLibs = map {$_ => 1} Klomp::Lib::getAllLibNames $tmpDestLib;

  my %okLibLC = map {lc $_ => 1} @$libWhitelist;
  my $allowAllLibs = @$libWhitelist == 0 ? 1 : 0;

  for my $lib(sort keys %libs){
    print "\n\nSYNCING $lib\n";
    if(not defined $remoteLibs{$lib}){
      print "skipping $lib: not in remote klomplib\n";
      next;
    }
    if(not $allowAllLibs and not defined $okLibLC{lc $lib}){
      print "skipping $lib: does not match lib whitelist: @$libWhitelist\n";
      next;
    }
    my $path = Klomp::Lib::getLibraryPath $lib;
    my $remotePath = Klomp::Lib::getLibraryPath $lib, $tmpDestLib;

    my $flacmirrorPath = Klomp::Lib::getFlacmirrorPath $lib;
    my $remoteFlacmirrorPath = Klomp::Lib::getFlacmirrorPath $lib, $tmpDestLib;

    for my $override(@$libSubDirOverrides){
      my ($oldSubDir, $newSubDir) = @$override;
      $remotePath =~ s/\Q$oldSubDir\E/$newSubDir/g if defined $remotePath;
      $remoteFlacmirrorPath =~ s/\Q$oldSubDir\E/$newSubDir/g if defined $remoteFlacmirrorPath;
    }

    my $flacmirrorExists = defined $flacmirrorPath && $flacmirrorPath ne ""
      && defined $remoteFlacmirrorPath && $remoteFlacmirrorPath ne "";

    my $includeFlacs;
    if($flacSyncMode eq $FLAC_SYNC_MODE_ALWAYS){
      $includeFlacs = 1;
    }elsif($flacSyncMode eq $FLAC_SYNC_MODE_MIRROR){
      $includeFlacs = not $flacmirrorExists;
    }

    my @exts;
    if($includeFlacs){
      print "COPYING FLACS\n";
      @exts = ($FLAC_EXT, $OGG_EXT, @OTHER_SYNC_EXTS);
    }else{
      print "ignoring flacs\n";
      @exts = ($OGG_EXT, @OTHER_SYNC_EXTS);
    }
    my @fileIncludePatterns = map {"*.$_"} @exts;
    syncDir $path, $remotePath, $host, $presync, @fileIncludePatterns;

    print "\n\nflacmirror for: $lib\n";
    if($flacmirrorExists){
      syncDir $flacmirrorPath, $remoteFlacmirrorPath, $host, $presync, "*.$OGG_EXT";
    }else{
      print "skipping, flacmirror must to be set in both lib files";
    }
  }

  my $props = Klomp::Config::getProperties;
  my $remoteProps = Klomp::Config::getProperties $tmpDestConfig;

  if(defined $host){
    runOrDie "ssh", "$host", "bash -c 'klomp-update --utils-only'";
  }elsif(defined $$props{symlink} and defined $$remoteProps{symlink}){
    my $src = $$props{symlink};
    my $dest = $$remoteProps{symlink};
    $dest = "$host:$dest" if defined $host;
    runOrDie "rsync", "--delete-before", "-avP", "$src/", $dest;
  }
}

sub syncDir($$$$@){
  my ($local, $remote, $host, $presync, @fileIncludePatterns) = @_;

  my @args;
  #include subdirs
  push @args, "--include=*/";
  for my $pattern(@fileIncludePatterns){
    push @args, "--include=$pattern";
    push @args, "--include=" . uc($pattern);
  }
  #exclude everything
  push @args, "--exclude=*";

  #delete trailing slashes
  $local =~ s/\/$//;
  $remote =~ s/\/$//;

  if(defined $host){
    runOrDie "ssh", "$host", "mkdir -p $remote";
  }else{
    runOrDie "mkdir -p $remote";
  }

  my $dest = defined $host ? "$host:$remote" : $remote;

  runOrDie "presync", "$local", $dest if $presync;
  runOrDie "rsync",
    "--delete-before", "-av",
    "--progress",
    "$local/",
    $dest,
    @args;
}

&main(@ARGV);
