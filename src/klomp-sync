#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Config;
use Klomp::Files;
use Klomp::Lib;
use File::Basename qw(basename);

sub runOrDie(@);
sub remoteSync($$$$);
sub sync($$$$$$);
sub syncDir($$$$@);

my $klompDb = Klomp::Files::klompFile("db");
my $klompDateCache = Klomp::Files::klompFile("datecache");

my $klompLib = Klomp::Files::klompFile("lib");

my %okExts = map {$_ => 1} qw(
  flac
  ogg
  wav
  mp3 m4a wma
);

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    print this message
  $EXEC HOST [--flacs] [--presync] [LIB LIB LIB...]
    Overwrite remote klompdb with local klompdb.
    Sync from the local dirs in $klompLib
      to the remote dirs in the klomplib on HOST
  $EXEC --local KLOMP_LIB_FILE KLOMP_CONFIG_FILE [--flacs] [--presync] [LIB LIB LIB...]
    Sync from the local dirs in $klompLib
      to the local dirs in KLOMP_LIB_FILE.

  --flacs
     Always copy flac files.
     Normally, if the destination klomplib has a flacmirror, flacs are omitted.
  --presync
     Run `presync` runs before `rsync`.
     If files have been moved or renamed locally, `presync` moves the files on
       the destination rather than copying and deleting.
     It's fairly fast,  and can save huge amounts of time.
  --local
     Specify a local klomp lib and config, and copy locally.

  HOST
    SSH host string {[user\@]hostname} e.g.: ubuntu\@my-desktop
  KLOMP_LIB_FILE
    local file to use when syncing locally
  LIB
    Only sync libraries for indicated LIB args, if given (default is all)
    LIB must match the full library name, case-insensitive
";

sub main(@){
  if(@_ == 0 or $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }

  my ($host, $localKlompLib, $localKlompConfig);
  if(@_ >= 3 and $_[0] eq "--local"){
    shift;
    $localKlompLib = shift;
    $localKlompConfig = shift;
  }else{
    $host = shift;
  }

  my $includeFlacs = 0;
  if(@_ > 0 and $_[0] eq '--flacs'){
    shift;
    $includeFlacs = 1;
  }

  my $presync = 0;
  if(@_ > 0 and $_[0] eq '--presync'){
    shift;
    $presync = 1;
  }

  my $allLibsRegex = join "|", Klomp::Lib::getAllLibNames;

  my $libWhitelist = [];
  while(@_ > 0 and $_[0] =~ /^($allLibsRegex)$/i){
    my $lib = shift;
    push @$libWhitelist, $lib;
  }

  die "$usage\nERROR: unknown arg $_[0]\n" if @_ > 0;

  if(defined $host){
    remoteSync($host, $includeFlacs, $presync, $libWhitelist);
  }elsif(defined $localKlompLib){
    sync(undef, $localKlompLib, $localKlompConfig, $includeFlacs, $presync, $libWhitelist);
  }
}

sub runOrDie(@){
  print "@_\n";
  system @_;
  die "'@_' failed with exit code $?\n" if $? != 0;
}

sub remoteSync($$$$){
  my ($host, $includeFlacs, $presync, $libWhitelist) = @_;

  print "Getting remote lib path\n";
  my $lib = `ssh $host klomp-files lib`;
  chomp $lib;
  die "Could not find lib file with klomp-files\n" if $lib =~ /^\s*$/;

  print "Getting remote config path\n";
  my $config = `ssh $host klomp-files config`;
  chomp $config;
  die "Could not find config file with klomp-files\n" if $config =~ /^\s*$/;

  print "Getting remote db path\n";
  my $db = `ssh $host klomp-files db`;
  chomp $db;
  die "Could not find db file with klomp-files\n" if $db =~ /^\s*$/;

  print "Getting remote dateCache path\n";
  my $dateCache = `ssh $host klomp-files datecache`;
  chomp $dateCache;
  die "Could not find dateCache file with klomp-files\n" if $dateCache =~ /^\s*$/;

  my $now = time();

  my $remoteKlompLib = "/tmp/klomp-sync-$now-lib";
  my $remoteKlompConfig = "/tmp/klomp-sync-$now-config";

  print "Copying remote klomp lib here to read\n";
  system 'scp', "$host:$lib", $remoteKlompLib;
  die "Error copying $host:$lib\n" if not -e $remoteKlompLib;

  print "Copying remote klomp config here to read\n";
  system 'scp', "$host:$config", $remoteKlompConfig;
  die "Error copying $host:$config\n" if not -e $remoteKlompConfig;

  print "Overwriting remote klompdb with local klompdb\n";
  system 'rsync', "-c", "-v", "-P", $klompDb, "$host:$db";

  if(-f $klompDateCache){
    print "Overwriting remote datecache with local datecache\n";
    system 'rsync', "-c", "-v", "-P", $klompDateCache, "$host:$dateCache";
  }

  sync($host, $remoteKlompLib, $remoteKlompConfig, $includeFlacs, $presync, $libWhitelist);
}

sub sync($$$$$$){
  my ($host, $remoteKlompLib, $remoteKlompConfig, $includeFlacs, $presync, $libWhitelist) = @_;

  my %libs = map {$_ => 1} Klomp::Lib::getAllLibNames;
  my %remoteLibs = map {$_ => 1} Klomp::Lib::getAllLibNames $remoteKlompLib;

  my %okLibLC = map {lc $_ => 1} @$libWhitelist;
  my $allowAllLibs = @$libWhitelist == 0 ? 1 : 0;

  for my $lib(sort keys %libs){
    print "\n\nSYNCING $lib\n";
    if(not defined $remoteLibs{$lib}){
      print "skipping $lib: not in remote klomplib\n";
      next;
    }
    if(not $allowAllLibs and not defined $okLibLC{lc $lib}){
      print "skipping $lib: does not match lib whitelist: @$libWhitelist\n";
      next;
    }
    my $path = Klomp::Lib::getLibraryPath $lib;
    my $remotePath = Klomp::Lib::getLibraryPath $lib, $remoteKlompLib;

    my $flacmirrorPath = Klomp::Lib::getFlacmirrorPath $lib;
    my $remoteFlacmirrorPath = Klomp::Lib::getFlacmirrorPath $lib, $remoteKlompLib;

    my %exts = %okExts;
    if($includeFlacs or not $flacmirrorPath or not $remoteFlacmirrorPath){
      print "COPYING FLACS\n";
    }else{
      print "ignoring flacs\n";
      delete $exts{flac};
    }
    my @fileIncludePatterns = map {"*.$_"} keys %exts;
    syncDir $path, $remotePath, $host, $presync, @fileIncludePatterns;

    print "\n\nflacmirror for: $lib\n";
    if($flacmirrorPath and $remoteFlacmirrorPath){
      syncDir $flacmirrorPath, $remoteFlacmirrorPath, $host, $presync, "*.ogg";
    }else{
      print "skipping, flacmirror must to be set in both lib files";
    }
  }

  my $props = Klomp::Config::getProperties;
  my $remoteProps = Klomp::Config::getProperties $remoteKlompConfig;

  if(defined $host){
    runOrDie "ssh", "$host", "bash -c 'klomp-update --utils-only'";
  }elsif(defined $$props{symlink} and defined $$remoteProps{symlink}){
    my $src = $$props{symlink};
    my $dest = $$remoteProps{symlink};
    $dest = "$host:$dest" if defined $host;
    runOrDie "rsync", "--delete-before", "-avP", "$src/", $dest;
  }
}

sub syncDir($$$$@){
  my ($local, $remote, $host, $presync, @fileIncludePatterns) = @_;

  my @args;
  #include subdirs
  push @args, "--include=*/";
  for my $pattern(@fileIncludePatterns){
    push @args, "--include=$pattern";
    push @args, "--include=" . uc($pattern);
  }
  #exclude everything
  push @args, "--exclude=*";

  #delete trailing slashes
  $local =~ s/\/$//;
  $remote =~ s/\/$//;

  if(defined $host){
    runOrDie "ssh", "$host", "mkdir -p $remote";
  }else{
    runOrDie "mkdir -p $remote";
  }

  my $dest = defined $host ? "$host:$remote" : $remote;

  runOrDie "presync", "$local", $dest if $presync;
  runOrDie "rsync",
    "--delete-before", "-av",
    "--progress",
    "$local/",
    $dest,
    @args;
}

&main(@ARGV);
