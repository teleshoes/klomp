#!/usr/bin/perl
use strict;
use warnings;
use lib "/opt/klomp/lib";
use Klomp::Files;
use Klomp::Lib;
use Safe;

sub runOrDie(@);
sub libMatches($$);
sub remoteSync($$$$);
sub sync($$$$$);
sub syncDir($$$$@);

my $klompDb = Klomp::Files::klompFile("db");

my $klompLib = Klomp::Files::klompFile("lib");
my $tmpKlompLib = "/tmp/klomp-sync_" . time();

my %okExts = map {$_ => 1} qw(
  flac 
  ogg
  wav
  mp3 m4a wma
);

my $name = `basename $0`;
chomp $name;

my $usage = "Usage:
  $name -h|--help
    print this message
  $name HOST [--flacs] [--nopresync] [LIB_REGEX]
    Overwrite remote klompdb with local klompdb.
    Sync from the local dirs in $klompLib
      to the remote dirs in HOST:~/.klomplib
  $name --local KLOMP_LIB_FILE [--flacs] [--nopresync] [LIB_REGEX]
    Sync from the local dirs in $klompLib
      to the local dirs in KLOMP_LIB_FILE.

  --flacs
     Always copy flac files.
     Normally, if the destination klomplib has a flacmirror, flacs are omitted.
  --nopresync
     Never run presync. Normally, presync runs before syncing.
     If files have been moved or renamed locally, presync moves the files on
     the destination rather than copying and deleting.
     It's fairly fast and can save huge amounts of time, so its on by default.
  --local
     Specify a local klomplib and copy locally.

  HOST
    SSH host string {[user\@]hostname} e.g.: ubuntu\@my-desktop
  KLOMP_LIB_FILE
    local file to use when syncing locally
  LIB_REGEX
    Only sync libraries that match the regex LIB_REGEX, ignoring case.
    Default is the empty string, which matches all library names.
    e.g.: '^audio.*books|'
      matches 'audio-booksChildren' and does NOT match 'ReferenceAudioBooks'
    Note that, for no reason whatsoever, the regex is sandboxed with a Safe.
";

sub main(@){
  if(@_ == 0 or $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }

  my ($host, $localKlompLib);
  if(@_ >= 2 and $_[0] eq "--local"){
    shift;
    $localKlompLib = shift;
  }else{
    $host = shift;
  }

  my $includeFlacs = 0;
  if(@_ > 0 and $_[0] eq '--flacs'){
    shift;
    $includeFlacs = 1;
  }

  my $presync = 1;
  if(@_ > 0 and $_[0] eq '--nopresync'){
    shift;
    $presync = 0;
  }

  my $libRegex = '';
  $libRegex = shift if @_ == 1;

  die $usage if @_ > 0;

  if(defined $host){
    remoteSync($host, $includeFlacs, $presync, $libRegex);
  }elsif(defined $localKlompLib){
    sync(undef, $localKlompLib, $includeFlacs, $presync, $libRegex);
  }
}

sub runOrDie(@){
  print "@_\n";
  system @_;
  die "'@_' failed with exit code $?\n" if $? != 0;
}

sub libMatches($$){
  my ($lib, $regex) = @_;
  my $compartment = new Safe;
  my $ok = $compartment->reval("$lib =~ /$regex/i ? 'match' : 'nomatch'");
  return $ok eq 'match';
}

sub remoteSync($$$$){
  my ($host, $includeFlacs, $presync, $libRegex) = @_;

  print "Copying remote .klomplib here to read\n";
  system 'scp', "$host:~/.klomplib", $tmpKlompLib;
  die "Error copying $host:~/.klomplib\n" if not -e $tmpKlompLib;

  print "Overwriting remote .klompdb with local .klompdb\n";
  system 'scp', $klompDb, "$host:~";

  sync($host, $tmpKlompLib, $includeFlacs, $presync, $libRegex);
}

sub sync($$$$$){
  my ($host, $klompLib, $includeFlacs, $presync, $libRegex) = @_;

  my %libs = map {$_ => 1} Klomp::Lib::getAllLibNames;
  my %remoteLibs = map {$_ => 1} Klomp::Lib::getAllLibNames $klompLib;

  for my $lib(sort keys %libs){
    print "\n\nSYNCING $lib\n";
    if(not defined $remoteLibs{$lib}){
      print "skipping $lib: not in remote .klomplib\n";
      next;
    }
    if(not libMatches $lib, $libRegex){
      print "skipping $lib: does not match regex filter '$libRegex'\n";
      next;
    }
    my $path = Klomp::Lib::getLibraryPath $lib;
    my $remotePath = Klomp::Lib::getLibraryPath $lib, $klompLib;

    my $flacmirrorPath = Klomp::Lib::getFlacmirrorPath $lib;
    my $remoteFlacmirrorPath = Klomp::Lib::getFlacmirrorPath $lib, $klompLib;

    my %exts = %okExts;
    if($includeFlacs or not $flacmirrorPath or not $remoteFlacmirrorPath){
      print "COPYING FLACS\n";
    }else{
      print "ignoring flacs\n";
      delete $exts{flac};
    }
    my @whitelist = map {"*.$_"} keys %exts;
    syncDir $path, $remotePath, $host, $presync, @whitelist;

    print "\n\nflacmirror for: $lib\n";
    if($flacmirrorPath and $remoteFlacmirrorPath){
      syncDir $flacmirrorPath, $remoteFlacmirrorPath, $host, $presync, "*.ogg";
    }else{
      print "skipping, flacmirror must to be set in both lib files";
    }
  }

  my $props = Klomp::Lib::getProperties;
  my $remoteProps = Klomp::Lib::getProperties $klompLib;

  if(defined $host){
    runOrDie "ssh", "$host", "klomp-update --symlink-only";
  }elsif(defined $$props{symlink} and defined $$remoteProps{symlink}){
    my $src = $$props{symlink};
    my $dest = $$remoteProps{symlink};
    $dest = "$host:$dest" if defined $host;
    runOrDie "rsync", "--delete-before", "-avP", "$src/", $dest;
  }
}

sub syncDir($$$$@){
  my ($local, $remote, $host, $presync, @whitelist) = @_;

  my @args;
  #include subdirs
  push @args, "--include=*/";
  for my $pattern(@whitelist){
    push @args, "--include=$pattern";
    push @args, "--include=" . uc($pattern);
  }
  #exclude everything
  push @args, "--exclude=*";

  #delete trailing slashes
  $local =~ s/\/$//;
  $remote =~ s/\/$//;

  if(defined $host){
    runOrDie "ssh", "$host", "mkdir -p $remote";
  }else{
    runOrDie "mkdir -p $remote";
  }

  my $dest = defined $host ? "$host:$remote" : $remote;

  runOrDie "presync", "$local", $dest if $presync;
  runOrDie "rsync",
    "--delete-before", "-av",
    "--progress",
    "$local/",
    $dest,
    @args;
}

&main(@ARGV);
