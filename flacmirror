#!/usr/bin/perl
#Copyright 2011 by Elliot Wolk
#This is free software, released under the GPLv3
use strict;
use warnings;

sub shellQuiet(@);
sub convert($$$$);

my $srcDir = shift;
my $destDir = shift;

die "Usage: $0 src dest" if not defined $srcDir or not defined $destDir;
die "src '$srcDir' is not a directory" if !-d $srcDir;
die "dest '$destDir' is not a directory" if !-d $destDir;

system "dir2ogg --help > /dev/null";
if($?){
  die "could not exec dir2ogg";
}

my @flacs = `cd $srcDir; find -iname '*.flac'`;
@flacs = sort @flacs;

my %flacInfos;
for my $flac(@flacs){
  chomp $flac;
  $flac =~ /^(.*)\.flac$/i;
  my $baseName = $1;

  my $stat = shellQuiet 'stat', '--format', '%s:%Y', "$srcDir/$flac";
  if($? or $stat !~ /(\d+):(\d+)/){
    die "file not found: $srcDir/$flac\n";
  }
  my $filesize = $1;
  my $modified = $2;
  $flacInfos{$baseName} = "$filesize|$modified\n";
}

my @oggs = `cd $destDir; find -iname '*.ogg'`;
@oggs = sort @oggs;

my %unmodifiedBasenames;
my %ogginfos;
for my $ogg(@oggs){
  chomp $ogg;
  $ogg =~ /^(.*)\.ogg/i;
  my $baseName = $1;

  my $info = shellQuiet 'cat', "$destDir/$baseName.info";
  my $flacInfo = $flacInfos{$baseName};
  if(not defined $flacInfo or $info ne $flacInfo){
    print "removing $destDir/$ogg and $destDir/$baseName.info\n";
    system "rm", "$destDir/$ogg";
    system "rm", "$destDir/$baseName.info";
  }else{
    $unmodifiedBasenames{$baseName} = 1;
  }
}

my $len = length @flacs;
my $i=0;
my @failures;
my @flacsToTranscode;
for my $flac(@flacs){
  my $dirName = shellQuiet 'dirname', $flac;
  chomp $dirName;
  $flac =~ /^(.*)\.flac$/i;
  my $baseName = $1;

  if(defined $unmodifiedBasenames{$baseName}){
    print "skipping $srcDir/$flac\n";
  }else{
    push @flacsToTranscode, $flac;
  }
}


my $cores ;
$cores = `cat /proc/cpuinfo | grep ^processor | wc -l`;
chomp $cores;
if($cores !~ /^\d+$/){
  $cores = 2;
}
my $numWorkers = $cores;

my %flacSizes;
for my $flac(@flacsToTranscode){
  my $size = shellQuiet 'stat', '--format', '%s', "$srcDir/$flac";
  chomp $size;
  if($size !~ /^\d+$/){
    $size = 0;
  }
  $flacSizes{$flac} = $size;
}

my @biggestFlacs = @flacsToTranscode;#sort { $flacSizes{$b} <=> $flacSizes{$a} } keys %flacSizes;

my @workers;
for(my $i=0; $i<@biggestFlacs; $i++){
  my $flac = $biggestFlacs[$i];
  my $w = $i % $numWorkers;
  my @arr;
  my $jobFlacs = \@arr;
  if($w >= @workers){
    push @workers, $jobFlacs;
  }else{
    $jobFlacs = $workers[$w];
  }
  push @{$jobFlacs}, $flac;
}


my $baseLog = '/tmp/flacmirror_' . time;

my @pids;
for(my $w=0; $w<@workers; $w++){
  my @flacsJob = @{$workers[$w]};
  my $len = @flacsJob;
  my $pid = fork;
  if(not $pid){
    my $bytes=0;
    for my $flac(@{$workers[$w]}){
      $bytes += $flacSizes{$flac};
    }
    print "worker#$w starting $len flacs with total filesize $bytes\n";
    
    my $logFile = "$baseLog-$w.log";
    open FH, "> $logFile" or die "Could not open log file $logFile\n";
    for my $flac(@flacsJob){
      my $dirName = shellQuiet 'dirname', $flac;
      chomp $dirName;
      $flac =~ /^(.*)\.flac$/i;
      my $baseName = $1;

      system 'mkdir', '-p', "$destDir/$dirName";
      my $msg = convert $flac, $srcDir, $destDir, $baseName;
      print FH $msg;
    }
    close FH;
    exit 0;
  }else{
    push @pids, $pid;
  }
}

for my $pid(@pids){
  waitpid $pid, 0;
}
print "finished\n";

system "find $destDir -depth -type d -empty -execdir rmdir {} \\;";
mkdir $destDir;

my @statuses = shellQuiet 'cat', "$baseLog-*.log";
@statuses = sort @statuses;
my @successes;
my @failues;
my %statusMap;
for my $line(@statuses){
  if($line =~ /^success: (.*)/){
    push @successes, $1;
    $statusMap{$1} = 1;
  }elsif($line =~ /^failure: (.*)/){
    push @failures, $1;
    $statusMap{$1} = 0;
  }
}
for my $flac(@flacsToTranscode){
  if(not defined $statusMap{$flac}){
    $statusMap{$flac} = 0;
    push @failures, $flac;
  }
}

print "successfully converted " . scalar(@successes) . " flacs\n";

if(@failures > 0){
  print "There were " . scalar(@failures) . " failures\n";
  print join "\n", @failures;
  print "\n";
  exit 1;
}



sub wrapTokens(@){
  my @tokens;
  for my $token(@_){
    my $t = $token;
    $t =~ s/'/'\\''/g;
    push @tokens, "'$t'";
  }
  return @tokens;
}
sub shellQuiet(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd 2>/dev/null`;
}
sub shell(@){
  my $cmd = join ' ', wrapTokens(@_);
  return `$cmd`;
}

sub convert($$$$){
  my $flac = shift;
  my $srcDir = shift;
  my $destDir = shift;
  my $baseName = shift;

  system 'dir2ogg', "$srcDir/$flac";
  if($?){
    return "failure: $flac\n";
  }
  system 'mv', "$srcDir/$baseName.ogg", "$destDir/$baseName.ogg";
  open INFO, "> $destDir/$baseName.info";
  print INFO $flacInfos{$baseName};
  close INFO;
  return "success: $flac\n";
}


